# 리팩토링 및 코드 정비 작업 지시서

## 1. 작업 전 준비사항

### 1.1 사전 점검
- 모든 테스트가 통과하는지 확인
- 현재 코드베이스의 백업 생성
- 버전 관리 시스템(Git)에 현재 상태 커밋
- 코드 커버리지 측정 및 기록

### 1.2 도구 준비
- 정적 분석 도구 설정 (ESLint, SonarQube 등)
- 코드 포매터 설정 (Prettier, Black 등)
- IDE 리팩토링 기능 확인
- 테스트 자동화 환경 구축

## 2. 코드 분석 단계

### 2.1 코드 스멜(Code Smell) 식별
- **중복 코드**: 동일하거나 유사한 코드 블록
- **긴 메서드**: 20줄 이상의 메서드
- **큰 클래스**: 책임이 너무 많은 클래스
- **긴 매개변수 목록**: 3개 이상의 매개변수
- **주석 과다**: 코드로 표현 가능한 내용의 주석

### 2.2 복잡도 측정
- 순환 복잡도(Cyclomatic Complexity) 측정
- 인지 복잡도(Cognitive Complexity) 분석
- 결합도(Coupling) 및 응집도(Cohesion) 평가

## 3. 리팩토링 우선순위 설정

### 3.1 위험도 평가 매트릭스
| 영향도 | 복잡도 | 우선순위 | 접근 방법 |
|--------|--------|----------|-----------|
| 높음 | 높음 | 1순위 | 단계적 접근, 충분한 테스트 |
| 높음 | 낮음 | 2순위 | 신속한 처리 |
| 낮음 | 높음 | 3순위 | 시간 여유시 처리 |
| 낮음 | 낮음 | 4순위 | 일괄 처리 |

### 3.2 비즈니스 가치 고려
- 자주 변경되는 모듈 우선
- 핵심 비즈니스 로직 우선
- 성능 병목 지점 우선

## 4. 리팩토링 기법

### 4.1 메서드 수준
- **메서드 추출 (Extract Method)**
  ```
  변경 전: 긴 메서드 내 특정 로직
  변경 후: 의미있는 이름의 별도 메서드
  ```
- **메서드 인라인 (Inline Method)**
  ```
  변경 전: 단순 위임만 하는 메서드
  변경 후: 호출부에 직접 구현
  ```

### 4.2 클래스 수준
- **클래스 추출 (Extract Class)**
  ```
  변경 전: 책임이 많은 하나의 클래스
  변경 후: 책임별로 분리된 여러 클래스
  ```
- **인터페이스 추출 (Extract Interface)**
  ```
  변경 전: 구체 클래스 의존
  변경 후: 인터페이스 의존
  ```

### 4.3 데이터 구조
- **필드 캡슐화 (Encapsulate Field)**
  ```
  변경 전: public 필드
  변경 후: private 필드 + getter/setter
  ```
- **컬렉션 캡슐화 (Encapsulate Collection)**
  ```
  변경 전: 컬렉션 직접 반환
  변경 후: 불변 뷰 또는 복사본 반환
  ```

## 5. 코드 정비 체크리스트

### 5.1 명명 규칙
- [ ] 클래스명: PascalCase, 명사형
- [ ] 메서드명: camelCase, 동사형
- [ ] 변수명: 의미가 명확한 이름
- [ ] 상수명: UPPER_SNAKE_CASE

### 5.2 코드 구조
- [ ] 메서드당 하나의 책임
- [ ] 클래스당 단일 책임 원칙(SRP) 준수
- [ ] 순환 참조 제거
- [ ] 적절한 접근 제어자 사용

### 5.3 에러 처리
- [ ] 명확한 예외 타입 사용
- [ ] 예외 메시지 포함
- [ ] 리소스 정리 (try-with-resources)
- [ ] 널 체크 및 방어적 프로그래밍

## 6. 테스트 전략

### 6.1 테스트 작성
- 리팩토링 전 테스트 작성 (없는 경우)
- 특성 테스트(Characterization Test) 활용
- 경계값 테스트 포함

### 6.2 테스트 실행
- 각 리팩토링 단계마다 테스트 실행
- 성능 테스트로 개선 효과 측정
- 회귀 테스트 수행

## 7. 문서화

### 7.1 변경 사항 기록
```markdown
## 변경 내역
- 날짜: YYYY-MM-DD
- 작업자: 이름
- 변경 내용:
  - AS-IS: 기존 구조/문제점
  - TO-BE: 개선된 구조/해결책
  - 이유: 변경 근거
```

### 7.2 코드 문서화
- 복잡한 비즈니스 로직 설명
- API 문서 업데이트
- 아키텍처 결정 기록(ADR)

## 8. 검수 및 리뷰

### 8.1 자가 검수
- [ ] 모든 테스트 통과
- [ ] 코드 커버리지 유지/개선
- [ ] 정적 분석 도구 경고 해결
- [ ] 성능 저하 없음

### 8.2 동료 리뷰
- Pull Request 생성
- 변경 사항 설명 포함
- 리뷰어 할당 (최소 2명)
- 피드백 반영 및 재검토

## 9. 배포 및 모니터링

### 9.1 단계적 배포
- 개발 환경 배포 및 검증
- 스테이징 환경 테스트
- 프로덕션 canary 배포
- 전체 롤아웃

### 9.2 배포 후 모니터링
- 에러율 모니터링
- 성능 지표 확인
- 사용자 피드백 수집
- 롤백 계획 준비

## 10. 회고 및 개선

### 10.1 회고 항목
- 잘된 점 (Keep)
- 개선할 점 (Problem)
- 시도할 점 (Try)

### 10.2 지식 공유
- 팀 내 리팩토링 경험 공유
- 베스트 프랙티스 문서화
- 재사용 가능한 패턴 정리

---

## 부록: 리팩토링 안티패턴

### 피해야 할 사항
1. **빅뱅 리팩토링**: 한 번에 모든 것을 변경
2. **테스트 없는 리팩토링**: 안전망 없이 진행
3. **과도한 추상화**: 필요 이상의 복잡성 추가
4. **성급한 최적화**: 측정 없는 성능 개선
5. **컨텍스트 무시**: 팀/프로젝트 상황 미고려