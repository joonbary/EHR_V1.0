"""
부서별 리더 성장 KPI 대시보드 시스템
Executive-level dashboard for monitoring leader development KPIs across departments
Generated by: HR executive dashboard analyst + Django data integrator
"""

from django.views.generic import TemplateView
from django.views import View
from django.http import JsonResponse
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required
from django.db.models import Count, Avg, Q, F, Sum, Case, When, Value, IntegerField, FloatField
from django.db.models.functions import TruncMonth, TruncQuarter
from django.core.cache import cache
from django.utils import timezone
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, field
from enum import Enum
import json
import pandas as pd
from collections import defaultdict

# Import models from existing apps
from employees.models import Employee, Department
from evaluations.models import Evaluation
from certifications.models import GrowthLevelCertification, CertificationCheckLog
from trainings.models import TrainingEnrollment, TrainingCourse
from job_profiles.models import JobLevelProfile, LeaderRecommendation


class KPICategory(Enum):
    """KPI 카테고리 정의"""
    LEADER_PIPELINE = "leader_pipeline"
    CERTIFICATION_PROGRESS = "certification_progress"
    TALENT_READINESS = "talent_readiness"
    TRAINING_EFFECTIVENESS = "training_effectiveness"
    SUCCESSION_PLANNING = "succession_planning"


class TimeRange(Enum):
    """시간 범위 정의"""
    CURRENT_MONTH = "current_month"
    CURRENT_QUARTER = "current_quarter"
    CURRENT_YEAR = "current_year"
    LAST_12_MONTHS = "last_12_months"
    ALL_TIME = "all_time"


@dataclass
class KPIMetric:
    """KPI 메트릭 데이터 구조"""
    name: str
    value: float
    unit: str = ""
    trend: str = "stable"  # up, down, stable
    change_percent: float = 0.0
    target: Optional[float] = None
    achievement_rate: Optional[float] = None
    details: Dict[str, Any] = field(default_factory=dict)


@dataclass
class DepartmentKPI:
    """부서별 KPI 데이터 구조"""
    department_id: str
    department_name: str
    total_employees: int
    metrics: Dict[str, KPIMetric]
    sub_departments: List['DepartmentKPI'] = field(default_factory=list)


class LeaderKPIAnalytics:
    """리더 성장 KPI 분석 엔진"""
    
    def __init__(self):
        self.cache_timeout = 300  # 5분 캐시
    
    def calculate_leader_pipeline_kpis(self, department_id: Optional[str] = None, 
                                     time_range: TimeRange = TimeRange.CURRENT_YEAR) -> Dict[str, Any]:
        """리더 파이프라인 KPI 계산"""
        cache_key = f"leader_pipeline_kpi_{department_id}_{time_range.value}"
        cached_data = cache.get(cache_key)
        if cached_data:
            return cached_data
        
        # 기본 쿼리 설정
        employees_query = Employee.objects.filter(is_active=True)
        if department_id:
            employees_query = employees_query.filter(
                Q(department_id=department_id) | 
                Q(department__parent_id=department_id)
            )
        
        # 시간 범위 필터
        date_filter = self._get_date_filter(time_range)
        
        # 1. 리더 후보자 pool 크기
        leader_candidates = LeaderRecommendation.objects.filter(
            employee__in=employees_query,
            is_active=True,
            **date_filter
        ).values('employee').distinct().count()
        
        # 2. 즉시 승진 가능 인원
        ready_now = LeaderRecommendation.objects.filter(
            employee__in=employees_query,
            is_active=True,
            readiness_score__gte=85,
            **date_filter
        ).values('employee').distinct().count()
        
        # 3. 1년 내 준비 가능 인원
        ready_in_year = LeaderRecommendation.objects.filter(
            employee__in=employees_query,
            is_active=True,
            readiness_score__gte=70,
            readiness_score__lt=85,
            **date_filter
        ).values('employee').distinct().count()
        
        # 4. 평균 준비도 점수
        avg_readiness = LeaderRecommendation.objects.filter(
            employee__in=employees_query,
            is_active=True,
            **date_filter
        ).aggregate(avg=Avg('readiness_score'))['avg'] or 0
        
        # 5. 리더십 레벨별 분포
        level_distribution = GrowthLevelCertification.objects.filter(
            employee__in=employees_query,
            status='CERTIFIED',
            **date_filter
        ).values('target_level').annotate(
            count=Count('id')
        ).order_by('target_level')
        
        # 6. 전월/전분기 대비 변화
        previous_period_filter = self._get_previous_period_filter(time_range)
        previous_candidates = LeaderRecommendation.objects.filter(
            employee__in=employees_query,
            is_active=True,
            **previous_period_filter
        ).values('employee').distinct().count()
        
        change_percent = 0
        if previous_candidates > 0:
            change_percent = ((leader_candidates - previous_candidates) / previous_candidates) * 100
        
        result = {
            'total_candidates': KPIMetric(
                name="리더 후보자 Pool",
                value=leader_candidates,
                unit="명",
                trend="up" if change_percent > 0 else "down" if change_percent < 0 else "stable",
                change_percent=change_percent,
                target=50,  # 목표값 설정 가능
                achievement_rate=(leader_candidates / 50 * 100) if leader_candidates > 0 else 0
            ),
            'ready_now': KPIMetric(
                name="즉시 승진 가능",
                value=ready_now,
                unit="명",
                details={'percentage': (ready_now / leader_candidates * 100) if leader_candidates > 0 else 0}
            ),
            'ready_in_year': KPIMetric(
                name="1년 내 준비 가능",
                value=ready_in_year,
                unit="명",
                details={'percentage': (ready_in_year / leader_candidates * 100) if leader_candidates > 0 else 0}
            ),
            'avg_readiness_score': KPIMetric(
                name="평균 준비도",
                value=round(avg_readiness, 1),
                unit="%",
                target=75,
                achievement_rate=(avg_readiness / 75 * 100) if avg_readiness > 0 else 0
            ),
            'level_distribution': {
                item['target_level']: item['count'] 
                for item in level_distribution
            }
        }
        
        cache.set(cache_key, result, self.cache_timeout)
        return result
    
    def calculate_certification_progress_kpis(self, department_id: Optional[str] = None,
                                            time_range: TimeRange = TimeRange.CURRENT_YEAR) -> Dict[str, Any]:
        """인증 진행률 KPI 계산"""
        employees_query = Employee.objects.filter(is_active=True)
        if department_id:
            employees_query = employees_query.filter(
                Q(department_id=department_id) | 
                Q(department__parent_id=department_id)
            )
        
        date_filter = self._get_date_filter(time_range)
        
        # 1. 인증 신청 건수
        total_applications = GrowthLevelCertification.objects.filter(
            employee__in=employees_query,
            **date_filter
        ).count()
        
        # 2. 인증 완료율
        certified_count = GrowthLevelCertification.objects.filter(
            employee__in=employees_query,
            status='CERTIFIED',
            **date_filter
        ).count()
        
        certification_rate = (certified_count / total_applications * 100) if total_applications > 0 else 0
        
        # 3. 평균 인증 소요 시간
        certified_records = GrowthLevelCertification.objects.filter(
            employee__in=employees_query,
            status='CERTIFIED',
            certified_date__isnull=False,
            **date_filter
        ).values('applied_date', 'certified_date')
        
        avg_days = 0
        if certified_records:
            total_days = sum(
                (record['certified_date'] - record['applied_date']).days 
                for record in certified_records
            )
            avg_days = total_days / len(certified_records)
        
        # 4. 레벨별 인증 현황
        level_stats = GrowthLevelCertification.objects.filter(
            employee__in=employees_query,
            **date_filter
        ).values('target_level', 'status').annotate(
            count=Count('id')
        )
        
        # 5. 인증 체크 활동
        check_activities = CertificationCheckLog.objects.filter(
            employee__in=employees_query,
            **date_filter
        ).count()
        
        # 6. 월별/분기별 트렌드
        trend_data = self._calculate_certification_trend(employees_query, time_range)
        
        return {
            'total_applications': KPIMetric(
                name="인증 신청 건수",
                value=total_applications,
                unit="건"
            ),
            'certification_rate': KPIMetric(
                name="인증 완료율",
                value=round(certification_rate, 1),
                unit="%",
                target=80,
                achievement_rate=(certification_rate / 80 * 100) if certification_rate > 0 else 0
            ),
            'avg_certification_days': KPIMetric(
                name="평균 인증 소요일",
                value=round(avg_days, 1),
                unit="일",
                target=30,
                achievement_rate=(30 / avg_days * 100) if avg_days > 0 else 0
            ),
            'check_activities': KPIMetric(
                name="인증 체크 활동",
                value=check_activities,
                unit="회"
            ),
            'level_stats': level_stats,
            'trend': trend_data
        }
    
    def calculate_training_effectiveness_kpis(self, department_id: Optional[str] = None,
                                            time_range: TimeRange = TimeRange.CURRENT_YEAR) -> Dict[str, Any]:
        """교육 효과성 KPI 계산"""
        employees_query = Employee.objects.filter(is_active=True)
        if department_id:
            employees_query = employees_query.filter(
                Q(department_id=department_id) | 
                Q(department__parent_id=department_id)
            )
        
        date_filter = self._get_date_filter(time_range)
        
        # 1. 교육 참여율
        total_employees = employees_query.count()
        trained_employees = TrainingEnrollment.objects.filter(
            employee__in=employees_query,
            status='COMPLETED',
            **date_filter
        ).values('employee').distinct().count()
        
        participation_rate = (trained_employees / total_employees * 100) if total_employees > 0 else 0
        
        # 2. 교육 이수율
        total_enrollments = TrainingEnrollment.objects.filter(
            employee__in=employees_query,
            **date_filter
        ).count()
        
        completed_enrollments = TrainingEnrollment.objects.filter(
            employee__in=employees_query,
            status='COMPLETED',
            **date_filter
        ).count()
        
        completion_rate = (completed_enrollments / total_enrollments * 100) if total_enrollments > 0 else 0
        
        # 3. 리더십 교육 집중도
        leadership_courses = TrainingCourse.objects.filter(
            category__name__icontains='리더십'
        )
        
        leadership_enrollments = TrainingEnrollment.objects.filter(
            employee__in=employees_query,
            course__in=leadership_courses,
            **date_filter
        ).count()
        
        leadership_focus = (leadership_enrollments / total_enrollments * 100) if total_enrollments > 0 else 0
        
        # 4. 교육 후 성과 개선
        # 교육 이수 후 평가 등급 변화 추적
        performance_improvement = self._calculate_post_training_performance(employees_query, date_filter)
        
        # 5. 인당 교육 시간
        total_hours = TrainingEnrollment.objects.filter(
            employee__in=employees_query,
            status='COMPLETED',
            **date_filter
        ).aggregate(
            total=Sum('course__duration_hours')
        )['total'] or 0
        
        avg_hours_per_employee = total_hours / total_employees if total_employees > 0 else 0
        
        return {
            'participation_rate': KPIMetric(
                name="교육 참여율",
                value=round(participation_rate, 1),
                unit="%",
                target=90,
                achievement_rate=(participation_rate / 90 * 100) if participation_rate > 0 else 0
            ),
            'completion_rate': KPIMetric(
                name="교육 이수율",
                value=round(completion_rate, 1),
                unit="%",
                target=85,
                achievement_rate=(completion_rate / 85 * 100) if completion_rate > 0 else 0
            ),
            'leadership_focus': KPIMetric(
                name="리더십 교육 비중",
                value=round(leadership_focus, 1),
                unit="%",
                target=40,
                achievement_rate=(leadership_focus / 40 * 100) if leadership_focus > 0 else 0
            ),
            'performance_improvement': KPIMetric(
                name="교육 후 성과 개선율",
                value=round(performance_improvement, 1),
                unit="%",
                details={'improved_count': 0}  # 실제 계산 필요
            ),
            'avg_training_hours': KPIMetric(
                name="인당 교육시간",
                value=round(avg_hours_per_employee, 1),
                unit="시간",
                target=40,
                achievement_rate=(avg_hours_per_employee / 40 * 100) if avg_hours_per_employee > 0 else 0
            )
        }
    
    def calculate_talent_readiness_kpis(self, department_id: Optional[str] = None,
                                       time_range: TimeRange = TimeRange.CURRENT_YEAR) -> Dict[str, Any]:
        """인재 준비도 KPI 계산"""
        employees_query = Employee.objects.filter(is_active=True)
        if department_id:
            employees_query = employees_query.filter(
                Q(department_id=department_id) | 
                Q(department__parent_id=department_id)
            )
        
        # 1. High Potential 인재 비율
        total_employees = employees_query.count()
        
        # 최근 평가 A 이상인 직원
        high_performers = Evaluation.objects.filter(
            employee__in=employees_query,
            grade__in=['A+', 'A'],
            evaluation_year=timezone.now().year
        ).values('employee').distinct().count()
        
        high_potential_ratio = (high_performers / total_employees * 100) if total_employees > 0 else 0
        
        # 2. 핵심 직무 준비도
        key_positions = JobLevelProfile.objects.filter(
            is_key_position=True
        )
        
        ready_for_key_positions = LeaderRecommendation.objects.filter(
            employee__in=employees_query,
            target_job__in=key_positions,
            readiness_score__gte=80,
            is_active=True
        ).values('target_job').distinct().count()
        
        key_position_coverage = (ready_for_key_positions / key_positions.count() * 100) if key_positions.count() > 0 else 0
        
        # 3. 승계 준비 지수
        succession_readiness = self._calculate_succession_readiness(department_id)
        
        # 4. 역량 갭 분석
        competency_gaps = self._analyze_competency_gaps(employees_query)
        
        # 5. 리텐션 리스크
        retention_risk = self._calculate_retention_risk(employees_query)
        
        return {
            'high_potential_ratio': KPIMetric(
                name="High Potential 비율",
                value=round(high_potential_ratio, 1),
                unit="%",
                target=20,
                achievement_rate=(high_potential_ratio / 20 * 100) if high_potential_ratio > 0 else 0
            ),
            'key_position_coverage': KPIMetric(
                name="핵심직무 준비도",
                value=round(key_position_coverage, 1),
                unit="%",
                target=100,
                achievement_rate=key_position_coverage
            ),
            'succession_readiness': KPIMetric(
                name="승계 준비 지수",
                value=round(succession_readiness, 1),
                unit="점",
                details={'max_score': 100}
            ),
            'competency_gap_score': KPIMetric(
                name="역량 갭 점수",
                value=round(competency_gaps, 1),
                unit="점",
                trend="down" if competency_gaps < 50 else "up",
                details={'target_gap': 30}
            ),
            'retention_risk': KPIMetric(
                name="리텐션 리스크",
                value=round(retention_risk, 1),
                unit="%",
                trend="up" if retention_risk > 20 else "stable",
                details={'high_risk_count': 0}  # 실제 계산 필요
            )
        }
    
    def get_department_hierarchy_kpis(self, parent_department_id: Optional[str] = None) -> List[DepartmentKPI]:
        """부서 계층별 KPI 조회"""
        departments = Department.objects.filter(
            parent_id=parent_department_id,
            is_active=True
        ).order_by('name')
        
        result = []
        for dept in departments:
            dept_kpi = DepartmentKPI(
                department_id=str(dept.id),
                department_name=dept.name,
                total_employees=Employee.objects.filter(
                    department=dept,
                    is_active=True
                ).count(),
                metrics={}
            )
            
            # 각 KPI 카테고리별 메트릭 계산
            dept_kpi.metrics['leader_pipeline'] = self.calculate_leader_pipeline_kpis(
                str(dept.id), 
                TimeRange.CURRENT_YEAR
            )
            dept_kpi.metrics['certification'] = self.calculate_certification_progress_kpis(
                str(dept.id),
                TimeRange.CURRENT_YEAR
            )
            dept_kpi.metrics['training'] = self.calculate_training_effectiveness_kpis(
                str(dept.id),
                TimeRange.CURRENT_YEAR
            )
            dept_kpi.metrics['readiness'] = self.calculate_talent_readiness_kpis(
                str(dept.id),
                TimeRange.CURRENT_YEAR
            )
            
            # 하위 부서 재귀적 조회
            dept_kpi.sub_departments = self.get_department_hierarchy_kpis(str(dept.id))
            
            result.append(dept_kpi)
        
        return result
    
    def _get_date_filter(self, time_range: TimeRange) -> Dict[str, Any]:
        """시간 범위에 따른 날짜 필터 생성"""
        now = timezone.now()
        
        if time_range == TimeRange.CURRENT_MONTH:
            start_date = now.replace(day=1)
        elif time_range == TimeRange.CURRENT_QUARTER:
            quarter = (now.month - 1) // 3
            start_date = now.replace(month=quarter * 3 + 1, day=1)
        elif time_range == TimeRange.CURRENT_YEAR:
            start_date = now.replace(month=1, day=1)
        elif time_range == TimeRange.LAST_12_MONTHS:
            start_date = now - timedelta(days=365)
        else:  # ALL_TIME
            return {}
        
        return {'created_at__gte': start_date}
    
    def _get_previous_period_filter(self, time_range: TimeRange) -> Dict[str, Any]:
        """이전 기간 날짜 필터 생성"""
        now = timezone.now()
        
        if time_range == TimeRange.CURRENT_MONTH:
            end_date = now.replace(day=1) - timedelta(days=1)
            start_date = end_date.replace(day=1)
        elif time_range == TimeRange.CURRENT_QUARTER:
            quarter = (now.month - 1) // 3
            end_date = now.replace(month=quarter * 3 + 1, day=1) - timedelta(days=1)
            start_date = end_date.replace(day=1) - timedelta(days=89)  # 약 3개월
        elif time_range == TimeRange.CURRENT_YEAR:
            end_date = now.replace(month=1, day=1) - timedelta(days=1)
            start_date = end_date.replace(month=1, day=1)
        else:
            return {}
        
        return {'created_at__gte': start_date, 'created_at__lte': end_date}
    
    def _calculate_certification_trend(self, employees_query, time_range: TimeRange) -> List[Dict[str, Any]]:
        """인증 트렌드 계산"""
        if time_range in [TimeRange.CURRENT_MONTH, TimeRange.CURRENT_QUARTER]:
            # 월별 트렌드
            trend = GrowthLevelCertification.objects.filter(
                employee__in=employees_query
            ).annotate(
                month=TruncMonth('applied_date')
            ).values('month').annotate(
                applications=Count('id'),
                certifications=Count('id', filter=Q(status='CERTIFIED'))
            ).order_by('month')[-6:]  # 최근 6개월
        else:
            # 분기별 트렌드
            trend = GrowthLevelCertification.objects.filter(
                employee__in=employees_query
            ).annotate(
                quarter=TruncQuarter('applied_date')
            ).values('quarter').annotate(
                applications=Count('id'),
                certifications=Count('id', filter=Q(status='CERTIFIED'))
            ).order_by('quarter')[-4:]  # 최근 4분기
        
        return list(trend)
    
    def _calculate_post_training_performance(self, employees_query, date_filter: Dict) -> float:
        """교육 후 성과 개선율 계산
        
        교육 이수 직원의 평가 등급 개선 비율을 계산합니다.
        - 교육 이수 전후 평가 등급 비교
        - 평가 점수 향상도 측정
        - 교육 완료 후 3개월 이내 평가 대상
        """
        from trainings.models import TrainingEnrollment
        from evaluations.models import Evaluation
        from django.db.models import Avg, Count, Q, F
        from datetime import timedelta
        
        # 교육 이수 완료한 직원들 조회
        completed_trainings = TrainingEnrollment.objects.filter(
            employee__in=employees_query,
            status='COMPLETED',
            completion_date__isnull=False
        )
        
        if date_filter:
            completed_trainings = completed_trainings.filter(
                completion_date__gte=date_filter.get('start_date'),
                completion_date__lte=date_filter.get('end_date')
            )
        
        improvement_count = 0
        total_evaluated = 0
        
        # 각 교육 이수 건에 대해 성과 개선 측정
        for training in completed_trainings.select_related('employee'):
            # 교육 전 평가 (교육 시작 전 6개월 이내)
            pre_eval = Evaluation.objects.filter(
                employee=training.employee,
                status='COMPLETED',
                created_at__lt=training.start_date,
                created_at__gte=training.start_date - timedelta(days=180)
            ).order_by('-created_at').first()
            
            # 교육 후 평가 (교육 완료 후 3개월 이내)
            post_eval = Evaluation.objects.filter(
                employee=training.employee,
                status='COMPLETED',
                created_at__gt=training.completion_date,
                created_at__lte=training.completion_date + timedelta(days=90)
            ).order_by('created_at').first()
            
            if pre_eval and post_eval:
                total_evaluated += 1
                
                # 등급 개선 여부 확인 (S > A+ > A > B+ > B > C > D)
                grade_values = {'S': 7, 'A+': 6, 'A': 5, 'B+': 4, 'B': 3, 'C': 2, 'D': 1}
                pre_grade_value = grade_values.get(pre_eval.final_grade, 0)
                post_grade_value = grade_values.get(post_eval.final_grade, 0)
                
                # 평가 점수나 등급이 개선된 경우
                if post_grade_value > pre_grade_value or \
                   (hasattr(post_eval, 'total_score') and hasattr(pre_eval, 'total_score') and 
                    post_eval.total_score > pre_eval.total_score):
                    improvement_count += 1
        
        # 개선율 계산 (백분율)
        if total_evaluated > 0:
            improvement_rate = (improvement_count / total_evaluated) * 100
            return round(improvement_rate, 1)
        
        # 데이터가 없는 경우 기본값
        return 0.0
    
    def _calculate_succession_readiness(self, department_id: Optional[str]) -> float:
        """승계 준비도 지수 계산
        
        핵심 직무별 후보자 수와 준비도를 종합한 지수를 계산합니다.
        - 핵심 직책별 후보자 pool 규모
        - 후보자의 평균 성장레벨 및 평가등급
        - 리더십 역량 보유 여부
        - 100점 만점 기준
        """
        from django.db.models import Count, Avg, Q, Case, When, Value, IntegerField
        
        # 대상 직원 쿼리
        employees_query = Employee.objects.filter(employment_status='재직')
        if department_id:
            employees_query = employees_query.filter(department_id=department_id)
        
        # 핵심 직책 정의 (관리자급 이상)
        key_positions = ['과장', '차장', '부장', '이사', '상무', '전무', '부사장', '사장']
        
        # 현재 핵심 직책 보유자 수
        key_position_holders = employees_query.filter(
            position__in=key_positions
        ).count()
        
        if key_position_holders == 0:
            return 0.0
        
        # 승계 후보자 기준:
        # 1. 한 단계 아래 직급
        # 2. 평가등급 B+ 이상
        # 3. 성장레벨 3 이상
        succession_candidates = 0
        readiness_scores = []
        
        position_hierarchy = {
            '과장': '대리',
            '차장': '과장',
            '부장': '차장',
            '이사': '부장',
            '상무': '이사',
            '전무': '상무',
            '부사장': '전무',
            '사장': '부사장'
        }
        
        for current_position, candidate_position in position_hierarchy.items():
            # 현재 직책 보유자 수
            current_holders = employees_query.filter(position=current_position).count()
            
            if current_holders > 0:
                # 후보자 조회
                candidates = employees_query.filter(
                    position=candidate_position
                ).annotate(
                    # 최근 평가 등급 확인
                    recent_grade=Case(
                        When(evaluation__status='COMPLETED', then='evaluation__final_grade'),
                        default=Value(''),
                        output_field=models.CharField()
                    )
                )
                
                # 자격 요건을 충족하는 후보자
                qualified_candidates = candidates.filter(
                    Q(recent_grade__in=['S', 'A+', 'A', 'B+']) |
                    Q(growth_level__gte=3)
                ).count()
                
                # 후보자 비율 (목표: 각 직책당 2명 이상의 후보자)
                if current_holders > 0:
                    candidate_ratio = qualified_candidates / current_holders
                    # 최대 200% (직책당 2명)로 제한
                    candidate_ratio = min(candidate_ratio, 2.0)
                    readiness_scores.append(candidate_ratio * 50)  # 50점 만점으로 환산
                    
                    succession_candidates += qualified_candidates
        
        # 전체 준비도 점수 계산
        if readiness_scores:
            # 평균 준비도 점수
            avg_readiness = sum(readiness_scores) / len(readiness_scores)
            
            # 추가 보너스 점수
            # 1. 전체 후보자 pool 크기 (최대 25점)
            pool_bonus = min((succession_candidates / key_position_holders) * 25, 25)
            
            # 2. 고성과자 비율 (최대 25점)
            high_performers = employees_query.filter(
                position__in=[v for v in position_hierarchy.values()]
            ).annotate(
                is_high_performer=Case(
                    When(
                        Q(evaluation__final_grade__in=['S', 'A+', 'A']) &
                        Q(evaluation__status='COMPLETED'),
                        then=Value(1)
                    ),
                    default=Value(0),
                    output_field=IntegerField()
                )
            ).aggregate(
                high_performer_ratio=Avg('is_high_performer')
            )['high_performer_ratio'] or 0
            
            performance_bonus = high_performer_ratio * 25
            
            # 최종 점수 (100점 만점)
            total_score = avg_readiness + pool_bonus + performance_bonus
            return round(min(total_score, 100), 1)
        
        return 0.0
    
    def _analyze_competency_gaps(self, employees_query) -> float:
        """역량 갭 분석
        
        목표 역량 대비 현재 역량 수준의 갭을 계산합니다.
        - 직급별 요구 역량 수준
        - 현재 보유 역량 수준
        - 갭이 클수록 높은 값 (개선 필요도)
        """
        from django.db.models import Avg, Count, Q, Case, When, Value, FloatField
        from evaluations.models import Evaluation
        
        # 직급별 목표 성장레벨 및 평가등급
        target_levels = {
            '사원': {'growth_level': 1, 'min_grade': 'B'},
            '대리': {'growth_level': 2, 'min_grade': 'B+'},
            '과장': {'growth_level': 3, 'min_grade': 'A'},
            '차장': {'growth_level': 4, 'min_grade': 'A'},
            '부장': {'growth_level': 5, 'min_grade': 'A+'},
            '이사': {'growth_level': 5, 'min_grade': 'A+'},
            '상무': {'growth_level': 6, 'min_grade': 'S'},
            '전무': {'growth_level': 6, 'min_grade': 'S'},
            '부사장': {'growth_level': 6, 'min_grade': 'S'},
            '사장': {'growth_level': 6, 'min_grade': 'S'}
        }
        
        grade_values = {'S': 7, 'A+': 6, 'A': 5, 'B+': 4, 'B': 3, 'C': 2, 'D': 1}
        
        total_gap_score = 0
        employee_count = 0
        
        # 각 직원별 역량 갭 계산
        for employee in employees_query.select_related('user'):
            position = employee.position or '사원'
            target = target_levels.get(position, target_levels['사원'])
            
            # 성장레벨 갭 (0-5 scale)
            current_growth_level = getattr(employee, 'growth_level', 1)
            growth_gap = max(0, target['growth_level'] - current_growth_level)
            growth_gap_normalized = (growth_gap / 5) * 50  # 50% 가중치
            
            # 평가등급 갭
            recent_eval = Evaluation.objects.filter(
                employee=employee,
                status='COMPLETED'
            ).order_by('-created_at').first()
            
            if recent_eval and recent_eval.final_grade:
                current_grade_value = grade_values.get(recent_eval.final_grade, 1)
                target_grade_value = grade_values.get(target['min_grade'], 3)
                grade_gap = max(0, target_grade_value - current_grade_value)
                grade_gap_normalized = (grade_gap / 6) * 50  # 50% 가중치
            else:
                # 평가 데이터가 없는 경우 중간값
                grade_gap_normalized = 25
            
            # 개인별 총 갭 점수 (0-100)
            individual_gap = growth_gap_normalized + grade_gap_normalized
            total_gap_score += individual_gap
            employee_count += 1
        
        # 평균 갭 점수 계산
        if employee_count > 0:
            avg_gap = total_gap_score / employee_count
            return round(avg_gap, 1)
        
        return 0.0
    
    def _calculate_retention_risk(self, employees_query) -> float:
        """리텐션 리스크 계산
        
        이직 위험이 높은 핵심 인재의 비율을 계산합니다.
        위험 요소:
        - 장기 근속 (5년 이상) without 승진
        - 낮은 평가등급 (C, D) 연속 2회 이상
        - 급여 인상률 낮음 (2% 미만)
        - 교육 기회 부족 (연 1회 미만)
        """
        from django.db.models import Count, Q, Case, When, Value, IntegerField
        from datetime import datetime, timedelta
        from evaluations.models import Evaluation
        from trainings.models import TrainingEnrollment
        
        total_employees = employees_query.count()
        if total_employees == 0:
            return 0.0
        
        high_risk_count = 0
        today = datetime.now().date()
        
        for employee in employees_query:
            risk_factors = 0
            
            # 위험 요소 1: 5년 이상 근속했지만 승진 없음
            if employee.hire_date:
                years_of_service = (today - employee.hire_date).days / 365
                if years_of_service >= 5:
                    # 현재 직급과 입사 시 직급 비교
                    if employee.position == employee.initial_position or \
                       employee.position in ['사원', '대리']:
                        risk_factors += 1
            
            # 위험 요소 2: 최근 2회 평가에서 낮은 등급
            recent_evals = Evaluation.objects.filter(
                employee=employee,
                status='COMPLETED'
            ).order_by('-created_at')[:2]
            
            low_grade_count = sum(1 for eval in recent_evals 
                                 if eval.final_grade in ['C', 'D'])
            if low_grade_count >= 2:
                risk_factors += 1
            
            # 위험 요소 3: 최근 1년간 교육 기회 부족
            one_year_ago = today - timedelta(days=365)
            training_count = TrainingEnrollment.objects.filter(
                employee=employee,
                enrolled_date__gte=one_year_ago,
                status__in=['COMPLETED', 'IN_PROGRESS', 'APPROVED']
            ).count()
            
            if training_count < 1:
                risk_factors += 1
            
            # 위험 요소 4: 고성과자인데 보상 부족 (평가는 높은데 직급은 낮음)
            if recent_evals.exists():
                latest_eval = recent_evals.first()
                if latest_eval.final_grade in ['S', 'A+', 'A'] and \
                   employee.position in ['사원', '대리']:
                    risk_factors += 1
            
            # 위험 요소 5: 나이와 직급 불균형 (40세 이상인데 대리 이하)
            if hasattr(employee, 'age') and employee.age:
                if employee.age >= 40 and employee.position in ['사원', '대리']:
                    risk_factors += 1
            
            # 2개 이상의 위험 요소가 있으면 고위험군으로 분류
            if risk_factors >= 2:
                high_risk_count += 1
        
        # 전체 직원 중 고위험군 비율 (백분율)
        risk_percentage = (high_risk_count / total_employees) * 100
        return round(risk_percentage, 1)


class LeaderKPIDashboardView(TemplateView):
    """리더 KPI 대시보드 뷰"""
    template_name = 'dashboards/leader_kpi_dashboard.html'
    
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        # 권한 체크 (HR 관리자 이상)
        if not self.request.user.groups.filter(name__in=['HR', 'Executive']).exists():
            return JsonResponse({'error': 'Unauthorized'}, status=403)
        return super().dispatch(*args, **kwargs)
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        analytics = LeaderKPIAnalytics()
        
        # 기본 필터 파라미터
        department_id = self.request.GET.get('department')
        time_range = TimeRange(self.request.GET.get('time_range', 'current_year'))
        
        # 전사 KPI 요약
        context['company_kpis'] = {
            'leader_pipeline': analytics.calculate_leader_pipeline_kpis(None, time_range),
            'certification': analytics.calculate_certification_progress_kpis(None, time_range),
            'training': analytics.calculate_training_effectiveness_kpis(None, time_range),
            'readiness': analytics.calculate_talent_readiness_kpis(None, time_range)
        }
        
        # 부서별 KPI
        if department_id:
            context['department_kpis'] = {
                'leader_pipeline': analytics.calculate_leader_pipeline_kpis(department_id, time_range),
                'certification': analytics.calculate_certification_progress_kpis(department_id, time_range),
                'training': analytics.calculate_training_effectiveness_kpis(department_id, time_range),
                'readiness': analytics.calculate_talent_readiness_kpis(department_id, time_range)
            }
        
        # 부서 계층 구조
        context['department_hierarchy'] = analytics.get_department_hierarchy_kpis()
        
        # 필터 옵션
        context['departments'] = Department.objects.filter(is_active=True).order_by('name')
        context['time_ranges'] = [
            {'value': tr.value, 'label': tr.value.replace('_', ' ').title()}
            for tr in TimeRange
        ]
        
        # 현재 필터
        context['current_filters'] = {
            'department': department_id,
            'time_range': time_range.value
        }
        
        return context


class LeaderKPIAPIView(View):
    """리더 KPI API 엔드포인트"""
    
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def get(self, request, kpi_category=None):
        """특정 KPI 카테고리 데이터 조회"""
        analytics = LeaderKPIAnalytics()
        
        department_id = request.GET.get('department')
        time_range = TimeRange(request.GET.get('time_range', 'current_year'))
        
        if kpi_category == 'leader_pipeline':
            data = analytics.calculate_leader_pipeline_kpis(department_id, time_range)
        elif kpi_category == 'certification':
            data = analytics.calculate_certification_progress_kpis(department_id, time_range)
        elif kpi_category == 'training':
            data = analytics.calculate_training_effectiveness_kpis(department_id, time_range)
        elif kpi_category == 'readiness':
            data = analytics.calculate_talent_readiness_kpis(department_id, time_range)
        else:
            # 전체 KPI 반환
            data = {
                'leader_pipeline': analytics.calculate_leader_pipeline_kpis(department_id, time_range),
                'certification': analytics.calculate_certification_progress_kpis(department_id, time_range),
                'training': analytics.calculate_training_effectiveness_kpis(department_id, time_range),
                'readiness': analytics.calculate_talent_readiness_kpis(department_id, time_range)
            }
        
        # KPIMetric 객체를 dict로 변환
        return JsonResponse(self._serialize_kpi_data(data))
    
    def _serialize_kpi_data(self, data):
        """KPIMetric 객체를 JSON 직렬화 가능한 형태로 변환"""
        if isinstance(data, KPIMetric):
            return {
                'name': data.name,
                'value': data.value,
                'unit': data.unit,
                'trend': data.trend,
                'change_percent': data.change_percent,
                'target': data.target,
                'achievement_rate': data.achievement_rate,
                'details': data.details
            }
        elif isinstance(data, dict):
            return {k: self._serialize_kpi_data(v) for k, v in data.items()}
        elif isinstance(data, list):
            return [self._serialize_kpi_data(item) for item in data]
        else:
            return data


class DepartmentComparisonAPIView(View):
    """부서간 비교 API"""
    
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def get(self, request):
        """부서간 KPI 비교 데이터 제공"""
        analytics = LeaderKPIAnalytics()
        time_range = TimeRange(request.GET.get('time_range', 'current_year'))
        kpi_type = request.GET.get('kpi_type', 'leader_pipeline')
        
        # 모든 활성 부서 조회
        departments = Department.objects.filter(
            is_active=True,
            parent_id__isnull=True  # 최상위 부서만
        ).order_by('name')
        
        comparison_data = []
        for dept in departments:
            dept_data = {
                'department_id': str(dept.id),
                'department_name': dept.name,
                'employee_count': Employee.objects.filter(
                    department=dept,
                    is_active=True
                ).count()
            }
            
            # 선택된 KPI 타입에 따라 데이터 조회
            if kpi_type == 'leader_pipeline':
                kpis = analytics.calculate_leader_pipeline_kpis(str(dept.id), time_range)
                dept_data['metrics'] = {
                    'total_candidates': kpis['total_candidates'].value,
                    'ready_now': kpis['ready_now'].value,
                    'avg_readiness': kpis['avg_readiness_score'].value
                }
            elif kpi_type == 'certification':
                kpis = analytics.calculate_certification_progress_kpis(str(dept.id), time_range)
                dept_data['metrics'] = {
                    'certification_rate': kpis['certification_rate'].value,
                    'avg_days': kpis['avg_certification_days'].value,
                    'total_applications': kpis['total_applications'].value
                }
            elif kpi_type == 'training':
                kpis = analytics.calculate_training_effectiveness_kpis(str(dept.id), time_range)
                dept_data['metrics'] = {
                    'participation_rate': kpis['participation_rate'].value,
                    'completion_rate': kpis['completion_rate'].value,
                    'avg_hours': kpis['avg_training_hours'].value
                }
            elif kpi_type == 'readiness':
                kpis = analytics.calculate_talent_readiness_kpis(str(dept.id), time_range)
                dept_data['metrics'] = {
                    'high_potential_ratio': kpis['high_potential_ratio'].value,
                    'key_position_coverage': kpis['key_position_coverage'].value,
                    'succession_readiness': kpis['succession_readiness'].value
                }
            
            comparison_data.append(dept_data)
        
        # 순위 계산
        if comparison_data and 'metrics' in comparison_data[0]:
            main_metric = list(comparison_data[0]['metrics'].keys())[0]
            comparison_data.sort(
                key=lambda x: x['metrics'].get(main_metric, 0),
                reverse=True
            )
            for idx, item in enumerate(comparison_data):
                item['rank'] = idx + 1
        
        return JsonResponse({
            'kpi_type': kpi_type,
            'time_range': time_range.value,
            'data': comparison_data
        })


class KPIExportView(View):
    """KPI 데이터 내보내기"""
    
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def get(self, request):
        """KPI 데이터를 엑셀로 내보내기"""
        from openpyxl import Workbook
        from django.http import HttpResponse
        
        analytics = LeaderKPIAnalytics()
        department_id = request.GET.get('department')
        time_range = TimeRange(request.GET.get('time_range', 'current_year'))
        
        # 워크북 생성
        wb = Workbook()
        
        # 1. 요약 시트
        ws_summary = wb.active
        ws_summary.title = "KPI Summary"
        
        # 헤더 작성
        headers = ['KPI Category', 'Metric', 'Value', 'Unit', 'Target', 'Achievement Rate', 'Trend']
        ws_summary.append(headers)
        
        # KPI 데이터 수집 및 작성
        kpi_categories = {
            'Leader Pipeline': analytics.calculate_leader_pipeline_kpis(department_id, time_range),
            'Certification': analytics.calculate_certification_progress_kpis(department_id, time_range),
            'Training': analytics.calculate_training_effectiveness_kpis(department_id, time_range),
            'Talent Readiness': analytics.calculate_talent_readiness_kpis(department_id, time_range)
        }
        
        for category, kpis in kpi_categories.items():
            for key, metric in kpis.items():
                if isinstance(metric, KPIMetric):
                    ws_summary.append([
                        category,
                        metric.name,
                        metric.value,
                        metric.unit,
                        metric.target or '',
                        f"{metric.achievement_rate:.1f}%" if metric.achievement_rate else '',
                        metric.trend
                    ])
        
        # 2. 부서별 상세 시트
        ws_dept = wb.create_sheet("Department Details")
        dept_headers = ['Department', 'Total Employees', 'Leader Candidates', 
                       'Certification Rate', 'Training Participation', 'High Potential Ratio']
        ws_dept.append(dept_headers)
        
        # 부서별 데이터 수집
        departments = Department.objects.filter(is_active=True).order_by('name')
        for dept in departments:
            dept_id = str(dept.id)
            employee_count = Employee.objects.filter(department=dept, is_active=True).count()
            
            pipeline = analytics.calculate_leader_pipeline_kpis(dept_id, time_range)
            cert = analytics.calculate_certification_progress_kpis(dept_id, time_range)
            training = analytics.calculate_training_effectiveness_kpis(dept_id, time_range)
            readiness = analytics.calculate_talent_readiness_kpis(dept_id, time_range)
            
            ws_dept.append([
                dept.name,
                employee_count,
                pipeline['total_candidates'].value,
                f"{cert['certification_rate'].value}%",
                f"{training['participation_rate'].value}%",
                f"{readiness['high_potential_ratio'].value}%"
            ])
        
        # HTTP 응답 생성
        response = HttpResponse(
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        filename = f"leader_kpi_report_{time_range.value}_{datetime.now().strftime('%Y%m%d')}.xlsx"
        response['Content-Disposition'] = f'attachment; filename={filename}'
        
        # 워크북 저장
        wb.save(response)
        return response


# URL 패턴 정의
urlpatterns = [
    # 대시보드 뷰
    path('leader-kpi-dashboard/', LeaderKPIDashboardView.as_view(), name='leader_kpi_dashboard'),
    
    # API 엔드포인트
    path('api/leader-kpi/', LeaderKPIAPIView.as_view(), name='leader_kpi_api'),
    path('api/leader-kpi/<str:kpi_category>/', LeaderKPIAPIView.as_view(), name='leader_kpi_api_category'),
    path('api/department-comparison/', DepartmentComparisonAPIView.as_view(), name='department_comparison_api'),
    path('api/kpi-export/', KPIExportView.as_view(), name='kpi_export'),
]


# JavaScript 대시보드 컴포넌트 예시
DASHBOARD_JS = """
// 리더 KPI 대시보드 JavaScript 컴포넌트

class LeaderKPIDashboard {
    constructor(containerId) {
        this.container = document.getElementById(containerId);
        this.filters = {
            department: null,
            timeRange: 'current_year'
        };
        this.autoRefreshInterval = null;
        this.charts = {};
    }
    
    async initialize() {
        this.renderFilters();
        await this.loadData();
        this.startAutoRefresh();
    }
    
    renderFilters() {
        const filterHTML = `
            <div class="kpi-filters">
                <select id="departmentFilter" class="form-control">
                    <option value="">전사</option>
                    <!-- 부서 옵션 동적 로드 -->
                </select>
                
                <select id="timeRangeFilter" class="form-control">
                    <option value="current_month">이번 달</option>
                    <option value="current_quarter">이번 분기</option>
                    <option value="current_year" selected>올해</option>
                    <option value="last_12_months">최근 12개월</option>
                    <option value="all_time">전체</option>
                </select>
                
                <button id="refreshBtn" class="btn btn-primary">
                    <i class="fas fa-sync"></i> 새로고침
                </button>
                
                <button id="exportBtn" class="btn btn-secondary">
                    <i class="fas fa-download"></i> 내보내기
                </button>
            </div>
        `;
        
        this.container.innerHTML = filterHTML + '<div id="kpiContent"></div>';
        this.attachEventListeners();
    }
    
    async loadData() {
        try {
            const params = new URLSearchParams({
                department: this.filters.department || '',
                time_range: this.filters.timeRange
            });
            
            const response = await fetch(`/api/leader-kpi/?${params}`);
            const data = await response.json();
            
            this.renderKPICards(data);
            this.renderCharts(data);
            this.renderDepartmentComparison();
            
        } catch (error) {
            console.error('Failed to load KPI data:', error);
            this.showError('데이터 로드 실패');
        }
    }
    
    renderKPICards(data) {
        const kpiContent = document.getElementById('kpiContent');
        
        // KPI 카드 렌더링
        const cardsHTML = `
            <div class="kpi-cards-grid">
                ${this.createKPICard(data.leader_pipeline.total_candidates, 'primary')}
                ${this.createKPICard(data.certification.certification_rate, 'success')}
                ${this.createKPICard(data.training.participation_rate, 'info')}
                ${this.createKPICard(data.readiness.high_potential_ratio, 'warning')}
            </div>
        `;
        
        kpiContent.innerHTML = cardsHTML;
    }
    
    createKPICard(metric, colorClass) {
        const trendIcon = metric.trend === 'up' ? '↑' : 
                         metric.trend === 'down' ? '↓' : '→';
        
        const achievementBar = metric.achievement_rate ? `
            <div class="achievement-bar">
                <div class="achievement-fill" style="width: ${metric.achievement_rate}%"></div>
            </div>
        ` : '';
        
        return `
            <div class="kpi-card ${colorClass}">
                <h5>${metric.name}</h5>
                <div class="kpi-value">
                    ${metric.value}${metric.unit}
                    <span class="trend ${metric.trend}">${trendIcon} ${Math.abs(metric.change_percent)}%</span>
                </div>
                ${metric.target ? `<div class="kpi-target">목표: ${metric.target}${metric.unit}</div>` : ''}
                ${achievementBar}
            </div>
        `;
    }
    
    renderCharts(data) {
        // Chart.js를 사용한 차트 렌더링
        this.renderPipelineChart(data.leader_pipeline);
        this.renderCertificationTrend(data.certification);
        this.renderTrainingEffectiveness(data.training);
        this.renderReadinessRadar(data.readiness);
    }
    
    renderPipelineChart(pipelineData) {
        const ctx = document.getElementById('pipelineChart').getContext('2d');
        
        this.charts.pipeline = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['즉시 가능', '1년 내 준비', '2년+ 필요'],
                datasets: [{
                    label: '리더 후보자 수',
                    data: [
                        pipelineData.ready_now.value,
                        pipelineData.ready_in_year.value,
                        pipelineData.total_candidates.value - pipelineData.ready_now.value - pipelineData.ready_in_year.value
                    ],
                    backgroundColor: ['#28a745', '#ffc107', '#dc3545']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false
            }
        });
    }
    
    async renderDepartmentComparison() {
        const response = await fetch(`/api/department-comparison/?kpi_type=leader_pipeline&time_range=${this.filters.timeRange}`);
        const comparisonData = await response.json();
        
        // 부서별 비교 차트 렌더링
        const ctx = document.getElementById('deptComparisonChart').getContext('2d');
        
        this.charts.comparison = new Chart(ctx, {
            type: 'horizontalBar',
            data: {
                labels: comparisonData.data.map(d => d.department_name),
                datasets: [{
                    label: '리더 후보자 수',
                    data: comparisonData.data.map(d => d.metrics.total_candidates),
                    backgroundColor: '#007bff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    xAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    }
    
    attachEventListeners() {
        document.getElementById('departmentFilter').addEventListener('change', (e) => {
            this.filters.department = e.target.value;
            this.loadData();
        });
        
        document.getElementById('timeRangeFilter').addEventListener('change', (e) => {
            this.filters.timeRange = e.target.value;
            this.loadData();
        });
        
        document.getElementById('refreshBtn').addEventListener('click', () => {
            this.loadData();
        });
        
        document.getElementById('exportBtn').addEventListener('click', () => {
            this.exportData();
        });
    }
    
    startAutoRefresh() {
        // 5분마다 자동 새로고침
        this.autoRefreshInterval = setInterval(() => {
            this.loadData();
        }, 300000);
    }
    
    stopAutoRefresh() {
        if (this.autoRefreshInterval) {
            clearInterval(this.autoRefreshInterval);
        }
    }
    
    async exportData() {
        const params = new URLSearchParams({
            department: this.filters.department || '',
            time_range: this.filters.timeRange
        });
        
        window.location.href = `/api/kpi-export/?${params}`;
    }
    
    showError(message) {
        const kpiContent = document.getElementById('kpiContent');
        kpiContent.innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle"></i> ${message}
            </div>
        `;
    }
}

// 초기화
document.addEventListener('DOMContentLoaded', () => {
    const dashboard = new LeaderKPIDashboard('leaderKPIDashboard');
    dashboard.initialize();
});
"""


# 대시보드 HTML 템플릿 예시
DASHBOARD_TEMPLATE = """
<!-- templates/dashboards/leader_kpi_dashboard.html -->
{% extends 'base.html' %}
{% load static %}

{% block title %}리더 성장 KPI 대시보드{% endblock %}

{% block extra_css %}
<style>
    .kpi-dashboard {
        padding: 20px;
    }
    
    .kpi-filters {
        display: flex;
        gap: 15px;
        margin-bottom: 30px;
        align-items: center;
    }
    
    .kpi-cards-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    
    .kpi-card {
        background: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid;
    }
    
    .kpi-card.primary { border-left-color: #007bff; }
    .kpi-card.success { border-left-color: #28a745; }
    .kpi-card.info { border-left-color: #17a2b8; }
    .kpi-card.warning { border-left-color: #ffc107; }
    
    .kpi-value {
        font-size: 2.5rem;
        font-weight: bold;
        margin: 10px 0;
    }
    
    .trend {
        font-size: 0.9rem;
        margin-left: 10px;
    }
    
    .trend.up { color: #28a745; }
    .trend.down { color: #dc3545; }
    .trend.stable { color: #6c757d; }
    
    .achievement-bar {
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        margin-top: 10px;
        overflow: hidden;
    }
    
    .achievement-fill {
        height: 100%;
        background: #28a745;
        transition: width 0.3s ease;
    }
    
    .chart-container {
        background: white;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .chart-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 20px;
    }
</style>
{% endblock %}

{% block content %}
<div class="kpi-dashboard">
    <h1>리더 성장 KPI 대시보드</h1>
    
    <!-- 필터 영역 -->
    <div id="leaderKPIDashboard"></div>
    
    <!-- 차트 영역 -->
    <div class="chart-grid">
        <div class="chart-container">
            <h5>리더 파이프라인 현황</h5>
            <canvas id="pipelineChart" height="300"></canvas>
        </div>
        
        <div class="chart-container">
            <h5>인증 진행 트렌드</h5>
            <canvas id="certificationTrendChart" height="300"></canvas>
        </div>
        
        <div class="chart-container">
            <h5>교육 효과성</h5>
            <canvas id="trainingChart" height="300"></canvas>
        </div>
        
        <div class="chart-container">
            <h5>인재 준비도</h5>
            <canvas id="readinessRadarChart" height="300"></canvas>
        </div>
    </div>
    
    <!-- 부서별 비교 -->
    <div class="chart-container">
        <h5>부서별 리더 KPI 비교</h5>
        <canvas id="deptComparisonChart" height="400"></canvas>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
<script>
{{ dashboard_js|safe }}
</script>
{% endblock %}
"""