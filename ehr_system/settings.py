

"""
Django settings for ehr_system project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', "django-insecure-pj@ho*t(o-4ja7vl)x6f4ehg&&s_h&u@^h-_1*=qo^ho8-w)9s")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # 디버그 모드 강제 활성화 (개발 중)

# Railway 배포 설정
if os.getenv('RAILWAY_ENVIRONMENT'):
    ALLOWED_HOSTS = ['*']
    DEBUG = True  # 임시로 디버그 모드 활성화하여 에러 확인
else:
    ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,*').split(',')

# AI 설정
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
OPENAI_MODEL = os.getenv('OPENAI_MODEL', 'gpt-3.5-turbo')

# AIRISS 서비스 설정
# Railway 내부 통신을 위한 내부 도메인 사용 (더 빠르고 안전함)
AIRISS_INTERNAL_URL = os.getenv('AIRISS_INTERNAL_URL', 'http://airiss.railway.internal')
# 외부 접근용 URL (사용자가 브라우저에서 접근할 때)
AIRISS_SERVICE_URL = os.getenv('AIRISS_SERVICE_URL', 'https://web-production-4066.up.railway.app')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",  # CORS support for AIRISS
    "rest_framework",
    "django_filters",
    "channels",  # WebSocket support
    "employees",
    "django.contrib.humanize",
    "evaluations",
    "compensation",
    "promotions",
    "selfservice",
    "reports",
    "job_profiles",
    "trainings",
    "certifications",
    "recruitment",
    "airiss",
    "organization",
    "notifications",
    "search",
    "access_control",
    "permissions",
    "dashboard",
    # AI 앱 추가
    "ai_insights",
    "ai_predictions",
    "ai_interviewer",
    "ai_recruitment",
    "ai_team_optimizer",
    "ai_coaching",
    "ai_quickwin",
    "ai_chatbot",  # AI 챗봇 앱 추가
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # WhiteNoise 추가
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # CORS middleware for AIRISS
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# 개발 환경에서 캐싱 완전 비활성화
if DEBUG:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }

ROOT_URLCONF = "ehr_system.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ehr_system.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import dj_database_url

# Railway 환경에서는 DATABASE_URL 사용
database_url = os.getenv('DATABASE_URL', '')

# DATABASE_URL이 유효한 경우에만 사용
if database_url and database_url != '://' and database_url.startswith(('postgres://', 'postgresql://')):
    print(f"Using PostgreSQL database from DATABASE_URL")
    DATABASES = {
        'default': dj_database_url.parse(database_url)
    }
else:
    # DATABASE_URL이 없거나 잘못된 경우 SQLite 사용
    if os.getenv('RAILWAY_ENVIRONMENT'):
        print("WARNING: DATABASE_URL not found or invalid. Using SQLite database.")
        print("To use PostgreSQL, please set DATABASE_URL in Railway Variables.")
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# WhiteNoise 설정 - 캐싱 문제 해결을 위해 압축 비활성화
if os.getenv('RAILWAY_ENVIRONMENT'):
    # Railway 환경에서는 캐싱 문제 해결을 위해 간단한 설정 사용
    STATICFILES_STORAGE = 'whitenoise.storage.StaticFilesStorage'
else:
    # 로컬 환경에서는 압축 사용
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 로깅 설정
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {module} {message}',
            'style': '{',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
    'loggers': {
        'employees': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}


# 로그인 URL 설정 - 제거됨
# LOGIN_URL = '/login/'

# Celery Configuration
CELERY_BROKER_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Seoul'

# Channels Configuration
ASGI_APPLICATION = 'ehr_system.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(os.getenv('REDIS_HOST', '127.0.0.1'), int(os.getenv('REDIS_PORT', 6379)))],
        },
    },
}

# AI API Keys
ANTHROPIC_API_KEY = os.getenv('ANTHROPIC_API_KEY', '')
# LOGIN_REDIRECT_URL = '/'
# LOGOUT_REDIRECT_URL = '/'

# Django REST Framework 설정
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
}

# CORS 설정 (AIRISS iframe 통합을 위해)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # AIRISS React 개발 서버
    "http://localhost:8000",  # Django 개발 서버
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Railway 배포 추가 설정
if os.getenv('RAILWAY_ENVIRONMENT'):
    # HTTPS 설정
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
    # CSRF 설정
    CSRF_TRUSTED_ORIGINS = [
        'https://*.railway.app',
        'https://*.up.railway.app',
    ]
    
    # CORS 설정 (프로덕션)
    CORS_ALLOWED_ORIGINS.extend([
        "https://ehrv10-production.up.railway.app",
        "https://web-production-4066.up.railway.app",  # AIRISS 서비스
    ])
