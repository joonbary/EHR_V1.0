"""
전사 리더 전략 자동 리포트 생성기
AI-powered executive leadership strategy report generator with PDF/PPTX output
Generated by: AI strategy summarizer + executive report generator
"""

from django.views import View
from django.http import HttpResponse, JsonResponse
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from django.template.loader import render_to_string
from django.db.models import Avg, Count, Q, F, Sum
import openai
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_CENTER, TA_RIGHT, TA_JUSTIFY
from reportlab.platypus.flowables import Flowable
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.barcharts import VerticalBarChart
from reportlab.graphics.charts.linecharts import HorizontalLineChart
from reportlab.graphics.charts.piecharts import Pie
from reportlab.graphics.charts.legends import Legend
from reportlab.graphics.widgets.markers import makeMarker
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN, MSO_ANCHOR
from pptx.dml.color import RGBColor
from pptx.chart.data import ChartData, CategoryChartData
from pptx.enum.chart import XL_CHART_TYPE
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
import base64
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, field
from enum import Enum
import json
from pathlib import Path

# Import existing modules
from leader_kpi_dashboard import LeaderKPIAnalytics, KPICategory, TimeRange
from leader_ai_assistant import LeadershipAIAssistant, QueryIntent, InsightLevel
from employees.models import Employee, Department
from certifications.models import GrowthLevelCertification
from trainings.models import TrainingEnrollment, TrainingCourse
from evaluations.models import Evaluation


class ReportType(Enum):
    """리포트 유형"""
    EXECUTIVE_SUMMARY = "executive_summary"
    MONTHLY_REPORT = "monthly_report"
    QUARTERLY_REVIEW = "quarterly_review"
    ANNUAL_STRATEGY = "annual_strategy"
    DEPARTMENT_ANALYSIS = "department_analysis"
    TALENT_PIPELINE = "talent_pipeline"
    CERTIFICATION_STATUS = "certification_status"
    TRAINING_EFFECTIVENESS = "training_effectiveness"


class ReportFormat(Enum):
    """리포트 포맷"""
    PDF = "pdf"
    PPTX = "pptx"
    HTML = "html"
    JSON = "json"


class ReportLanguage(Enum):
    """리포트 언어"""
    KOREAN = "ko"
    ENGLISH = "en"
    BILINGUAL = "bi"


@dataclass
class ReportSection:
    """리포트 섹션 구조"""
    title: str
    content: str
    data: Dict[str, Any] = field(default_factory=dict)
    charts: List[Dict[str, Any]] = field(default_factory=list)
    tables: List[Dict[str, Any]] = field(default_factory=list)
    insights: List[str] = field(default_factory=list)
    recommendations: List[Dict[str, str]] = field(default_factory=list)


@dataclass
class ReportMetadata:
    """리포트 메타데이터"""
    title: str
    subtitle: str
    generated_date: datetime
    period_start: datetime
    period_end: datetime
    department: Optional[str] = None
    author: str = "HR Analytics Team"
    confidentiality: str = "Confidential"
    language: ReportLanguage = ReportLanguage.KOREAN


class LeadershipStrategyReportGenerator:
    """리더십 전략 리포트 생성기"""
    
    def __init__(self):
        self.kpi_analytics = LeaderKPIAnalytics()
        self.ai_assistant = LeadershipAIAssistant()
        self.template_path = Path("templates/reports")
        
        # 스타일 설정
        self.brand_colors = {
            'primary': '#002F6C',      # 진한 네이비
            'secondary': '#0066CC',    # 밝은 블루
            'accent': '#00A3E0',       # 스카이 블루
            'success': '#00C389',      # 그린
            'warning': '#FFB000',      # 오렌지
            'danger': '#E4002B',       # 레드
            'neutral': '#63666A'       # 그레이
        }
        
        # 차트 스타일
        plt.style.use('seaborn-v0_8-darkgrid')
        sns.set_palette([
            self.brand_colors['primary'],
            self.brand_colors['secondary'],
            self.brand_colors['accent'],
            self.brand_colors['success']
        ])
    
    def generate_report(self, report_type: ReportType, 
                       format: ReportFormat,
                       language: ReportLanguage = ReportLanguage.KOREAN,
                       department_id: Optional[str] = None,
                       custom_params: Dict[str, Any] = None) -> bytes:
        """메인 리포트 생성 함수"""
        
        # 리포트 메타데이터 생성
        metadata = self._create_metadata(report_type, language, department_id)
        
        # 데이터 수집
        report_data = self._collect_report_data(report_type, department_id, custom_params)
        
        # AI 인사이트 생성
        ai_insights = self._generate_ai_insights(report_type, report_data, language)
        
        # 리포트 섹션 구성
        sections = self._build_report_sections(report_type, report_data, ai_insights, language)
        
        # 포맷별 리포트 생성
        if format == ReportFormat.PDF:
            return self._generate_pdf_report(metadata, sections)
        elif format == ReportFormat.PPTX:
            return self._generate_pptx_report(metadata, sections)
        elif format == ReportFormat.HTML:
            return self._generate_html_report(metadata, sections)
        else:  # JSON
            return self._generate_json_report(metadata, sections)
    
    def _create_metadata(self, report_type: ReportType, 
                        language: ReportLanguage,
                        department_id: Optional[str]) -> ReportMetadata:
        """리포트 메타데이터 생성"""
        now = timezone.now()
        
        # 리포트 유형별 제목 설정
        titles = {
            ReportType.EXECUTIVE_SUMMARY: {
                'ko': "경영진 리더십 현황 요약",
                'en': "Executive Leadership Summary"
            },
            ReportType.MONTHLY_REPORT: {
                'ko': f"{now.strftime('%Y년 %m월')} 리더십 KPI 리포트",
                'en': f"Leadership KPI Report - {now.strftime('%B %Y')}"
            },
            ReportType.QUARTERLY_REVIEW: {
                'ko': f"{now.year}년 {(now.month-1)//3 + 1}분기 리더십 성과 리뷰",
                'en': f"Q{(now.month-1)//3 + 1} {now.year} Leadership Performance Review"
            },
            ReportType.ANNUAL_STRATEGY: {
                'ko': f"{now.year}년 리더십 전략 연간 보고서",
                'en': f"{now.year} Annual Leadership Strategy Report"
            }
        }
        
        # 기간 설정
        if report_type == ReportType.MONTHLY_REPORT:
            period_start = now.replace(day=1)
            period_end = now
        elif report_type == ReportType.QUARTERLY_REVIEW:
            quarter = (now.month - 1) // 3
            period_start = now.replace(month=quarter * 3 + 1, day=1)
            period_end = now
        elif report_type == ReportType.ANNUAL_STRATEGY:
            period_start = now.replace(month=1, day=1)
            period_end = now
        else:
            period_start = now - timedelta(days=30)
            period_end = now
        
        # 부서명 조회
        department_name = None
        if department_id:
            try:
                dept = Department.objects.get(id=department_id)
                department_name = dept.name
            except Department.DoesNotExist:
                pass
        
        lang_key = 'ko' if language == ReportLanguage.KOREAN else 'en'
        
        return ReportMetadata(
            title=titles.get(report_type, {}).get(lang_key, "Leadership Report"),
            subtitle=f"{department_name} 분석" if department_name else "전사 분석",
            generated_date=now,
            period_start=period_start,
            period_end=period_end,
            department=department_name,
            language=language
        )
    
    def _collect_report_data(self, report_type: ReportType,
                           department_id: Optional[str],
                           custom_params: Dict[str, Any] = None) -> Dict[str, Any]:
        """리포트 데이터 수집"""
        data = {}
        
        # 기본 KPI 데이터
        data['current_kpis'] = {
            'leader_pipeline': self.kpi_analytics.calculate_leader_pipeline_kpis(
                department_id, TimeRange.CURRENT_YEAR
            ),
            'certification': self.kpi_analytics.calculate_certification_progress_kpis(
                department_id, TimeRange.CURRENT_YEAR
            ),
            'training': self.kpi_analytics.calculate_training_effectiveness_kpis(
                department_id, TimeRange.CURRENT_YEAR
            ),
            'readiness': self.kpi_analytics.calculate_talent_readiness_kpis(
                department_id, TimeRange.CURRENT_YEAR
            )
        }
        
        # 비교 데이터 (전년 대비)
        data['comparison'] = self._get_year_over_year_comparison(department_id)
        
        # 트렌드 데이터
        data['trends'] = self._get_trend_data(report_type, department_id)
        
        # 부서별 분석 (전사 리포트인 경우)
        if not department_id:
            data['department_analysis'] = self._get_department_analysis()
        
        # 리포트 유형별 추가 데이터
        if report_type == ReportType.TALENT_PIPELINE:
            data['pipeline_details'] = self._get_pipeline_details(department_id)
        elif report_type == ReportType.CERTIFICATION_STATUS:
            data['certification_details'] = self._get_certification_details(department_id)
        elif report_type == ReportType.TRAINING_EFFECTIVENESS:
            data['training_details'] = self._get_training_details(department_id)
        
        # 벤치마크 데이터
        data['benchmarks'] = self._get_benchmark_data()
        
        return data
    
    def _generate_ai_insights(self, report_type: ReportType,
                            data: Dict[str, Any],
                            language: ReportLanguage) -> Dict[str, Any]:
        """AI 기반 인사이트 생성"""
        insights = {}
        
        # 언어 설정
        lang_instruction = "Please respond in Korean." if language == ReportLanguage.KOREAN else "Please respond in English."
        
        # 1. Executive Summary
        exec_summary_prompt = f"""
        Based on the following KPI data, provide an executive summary highlighting:
        1. Overall leadership pipeline health
        2. Key achievements in the period
        3. Critical areas requiring attention
        4. Strategic recommendations
        
        {lang_instruction}
        
        Data: {json.dumps(self._serialize_for_ai(data['current_kpis']), ensure_ascii=False)}
        """
        
        insights['executive_summary'] = self.ai_assistant.generate_insights(
            exec_summary_prompt,
            data['current_kpis'],
            QueryIntent.GENERAL,
            InsightLevel.EXECUTIVE
        ).content
        
        # 2. Trend Analysis
        if 'trends' in data:
            trend_prompt = f"""
            Analyze the leadership KPI trends and provide:
            1. Significant patterns or changes
            2. Root cause analysis
            3. Future projections
            4. Risk factors
            
            {lang_instruction}
            
            Trend Data: {json.dumps(data['trends'], ensure_ascii=False)}
            """
            
            insights['trend_analysis'] = self.ai_assistant.generate_insights(
                trend_prompt,
                data['trends'],
                QueryIntent.TREND_ANALYSIS,
                InsightLevel.EXECUTIVE
            ).content
        
        # 3. Strategic Recommendations
        strategy_prompt = f"""
        Based on the current state and trends, provide strategic recommendations for:
        1. Short-term actions (3 months)
        2. Medium-term initiatives (6-12 months)
        3. Long-term strategy (1-3 years)
        
        Focus on actionable, measurable recommendations.
        {lang_instruction}
        """
        
        strategy_response = self.ai_assistant.generate_insights(
            strategy_prompt,
            data,
            QueryIntent.RECOMMENDATION,
            InsightLevel.EXECUTIVE
        )
        
        insights['strategic_recommendations'] = strategy_response.recommendations
        
        # 4. Risk Assessment
        risk_prompt = f"""
        Identify and assess risks in the leadership pipeline:
        1. Immediate risks requiring urgent action
        2. Medium-term risks to monitor
        3. Mitigation strategies
        
        {lang_instruction}
        """
        
        insights['risk_assessment'] = self.ai_assistant.generate_insights(
            risk_prompt,
            data,
            QueryIntent.PREDICTION,
            InsightLevel.EXECUTIVE
        ).content
        
        return insights
    
    def _build_report_sections(self, report_type: ReportType,
                             data: Dict[str, Any],
                             ai_insights: Dict[str, Any],
                             language: ReportLanguage) -> List[ReportSection]:
        """리포트 섹션 구성"""
        sections = []
        
        # 1. Executive Summary Section
        exec_section = ReportSection(
            title=self._get_text("Executive Summary", "경영진 요약", language),
            content=ai_insights.get('executive_summary', ''),
            charts=[self._create_kpi_summary_chart(data['current_kpis'])],
            insights=self._extract_key_insights(data['current_kpis'])
        )
        sections.append(exec_section)
        
        # 2. KPI Dashboard Section
        kpi_section = ReportSection(
            title=self._get_text("KPI Dashboard", "KPI 대시보드", language),
            content=self._get_text(
                "Comprehensive view of leadership development KPIs",
                "리더십 개발 KPI 종합 현황",
                language
            ),
            charts=[
                self._create_pipeline_chart(data['current_kpis']['leader_pipeline']),
                self._create_certification_chart(data['current_kpis']['certification']),
                self._create_training_chart(data['current_kpis']['training']),
                self._create_readiness_chart(data['current_kpis']['readiness'])
            ],
            tables=[self._create_kpi_comparison_table(data['current_kpis'], data['comparison'])]
        )
        sections.append(kpi_section)
        
        # 3. Trend Analysis Section
        if 'trends' in data and data['trends']:
            trend_section = ReportSection(
                title=self._get_text("Trend Analysis", "추세 분석", language),
                content=ai_insights.get('trend_analysis', ''),
                charts=[
                    self._create_trend_chart(data['trends'], 'pipeline'),
                    self._create_trend_chart(data['trends'], 'certification')
                ]
            )
            sections.append(trend_section)
        
        # 4. Department Analysis Section (전사 리포트인 경우)
        if 'department_analysis' in data:
            dept_section = ReportSection(
                title=self._get_text("Department Analysis", "부서별 분석", language),
                content=self._get_text(
                    "Comparative analysis across departments",
                    "부서간 비교 분석",
                    language
                ),
                charts=[self._create_department_comparison_chart(data['department_analysis'])],
                tables=[self._create_department_ranking_table(data['department_analysis'])]
            )
            sections.append(dept_section)
        
        # 5. Strategic Recommendations Section
        if 'strategic_recommendations' in ai_insights:
            strategy_section = ReportSection(
                title=self._get_text("Strategic Recommendations", "전략적 제언", language),
                content="",
                recommendations=ai_insights['strategic_recommendations'],
                charts=[self._create_recommendation_impact_chart(ai_insights['strategic_recommendations'])]
            )
            sections.append(strategy_section)
        
        # 6. Risk Assessment Section
        if 'risk_assessment' in ai_insights:
            risk_section = ReportSection(
                title=self._get_text("Risk Assessment", "리스크 평가", language),
                content=ai_insights['risk_assessment'],
                charts=[self._create_risk_matrix_chart(data)]
            )
            sections.append(risk_section)
        
        # 7. Appendix (상세 데이터)
        appendix_section = ReportSection(
            title=self._get_text("Appendix", "부록", language),
            content=self._get_text(
                "Detailed data and methodology",
                "상세 데이터 및 방법론",
                language
            ),
            tables=[
                self._create_detailed_metrics_table(data),
                self._create_methodology_table(language)
            ]
        )
        sections.append(appendix_section)
        
        return sections
    
    def _generate_pdf_report(self, metadata: ReportMetadata, 
                           sections: List[ReportSection]) -> bytes:
        """PDF 리포트 생성"""
        buffer = BytesIO()
        
        # PDF 문서 생성
        if metadata.language == ReportLanguage.KOREAN:
            # 한글 폰트 설정
            from reportlab.pdfbase import pdfmetrics
            from reportlab.pdfbase.ttfonts import TTFont
            
            try:
                pdfmetrics.registerFont(TTFont('NanumGothic', 'NanumGothic.ttf'))
                default_font = 'NanumGothic'
            except:
                default_font = 'Helvetica'
        else:
            default_font = 'Helvetica'
        
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=72
        )
        
        # 스타일 정의
        styles = getSampleStyleSheet()
        
        # 커스텀 스타일 추가
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Title'],
            fontSize=24,
            textColor=colors.HexColor(self.brand_colors['primary']),
            spaceAfter=30,
            fontName=default_font
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading1'],
            fontSize=16,
            textColor=colors.HexColor(self.brand_colors['primary']),
            spaceAfter=20,
            fontName=default_font
        )
        
        body_style = ParagraphStyle(
            'CustomBody',
            parent=styles['BodyText'],
            fontSize=10,
            alignment=TA_JUSTIFY,
            spaceAfter=12,
            fontName=default_font
        )
        
        # 스토리 구성
        story = []
        
        # 표지 페이지
        story.append(Paragraph(metadata.title, title_style))
        story.append(Paragraph(metadata.subtitle, heading_style))
        story.append(Spacer(1, 0.5*inch))
        
        # 메타데이터 테이블
        meta_data = [
            ['생성일', metadata.generated_date.strftime('%Y-%m-%d %H:%M')],
            ['분석 기간', f"{metadata.period_start.strftime('%Y-%m-%d')} ~ {metadata.period_end.strftime('%Y-%m-%d')}"],
            ['대상', metadata.department or '전사'],
            ['작성', metadata.author],
            ['보안 등급', metadata.confidentiality]
        ]
        
        meta_table = Table(meta_data, colWidths=[2*inch, 4*inch])
        meta_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor(self.brand_colors['neutral'])),
            ('TEXTCOLOR', (0, 0), (0, -1), colors.white),
            ('FONTNAME', (0, 0), (-1, -1), default_font),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('GRID', (0, 0), (-1, -1), 1, colors.grey),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('ROWBACKGROUNDS', (0, 0), (-1, -1), [colors.white, colors.HexColor('#f5f5f5')])
        ]))
        
        story.append(meta_table)
        story.append(PageBreak())
        
        # 목차
        story.append(Paragraph(self._get_text("Table of Contents", "목차", metadata.language), heading_style))
        toc_data = []
        for i, section in enumerate(sections, 1):
            toc_data.append([f"{i}.", section.title])
        
        toc_table = Table(toc_data, colWidths=[0.5*inch, 5.5*inch])
        toc_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), default_font),
            ('FONTSIZE', (0, 0), (-1, -1), 12),
            ('ALIGN', (0, 0), (0, -1), 'RIGHT'),
            ('LEFTPADDING', (1, 0), (1, -1), 20)
        ]))
        
        story.append(toc_table)
        story.append(PageBreak())
        
        # 각 섹션 추가
        for section in sections:
            # 섹션 제목
            story.append(Paragraph(section.title, heading_style))
            
            # 섹션 내용
            if section.content:
                story.append(Paragraph(section.content, body_style))
                story.append(Spacer(1, 0.2*inch))
            
            # 차트 추가
            for chart_data in section.charts:
                chart_flowable = self._create_pdf_chart(chart_data)
                if chart_flowable:
                    story.append(chart_flowable)
                    story.append(Spacer(1, 0.2*inch))
            
            # 테이블 추가
            for table_data in section.tables:
                pdf_table = self._create_pdf_table(table_data, default_font)
                story.append(pdf_table)
                story.append(Spacer(1, 0.2*inch))
            
            # 인사이트 추가
            if section.insights:
                story.append(Paragraph(
                    self._get_text("Key Insights:", "주요 인사이트:", metadata.language), 
                    heading_style
                ))
                for insight in section.insights:
                    story.append(Paragraph(f"• {insight}", body_style))
                story.append(Spacer(1, 0.2*inch))
            
            # 추천사항 추가
            if section.recommendations:
                story.append(Paragraph(
                    self._get_text("Recommendations:", "권고사항:", metadata.language), 
                    heading_style
                ))
                for rec in section.recommendations:
                    priority_color = {
                        'high': self.brand_colors['danger'],
                        'medium': self.brand_colors['warning'],
                        'low': self.brand_colors['neutral']
                    }.get(rec.get('priority', 'medium'), self.brand_colors['neutral'])
                    
                    rec_style = ParagraphStyle(
                        'RecStyle',
                        parent=body_style,
                        textColor=colors.HexColor(priority_color)
                    )
                    story.append(Paragraph(f"• {rec.get('text', '')}", rec_style))
                story.append(Spacer(1, 0.2*inch))
            
            story.append(PageBreak())
        
        # PDF 생성
        doc.build(story)
        buffer.seek(0)
        return buffer.read()
    
    def _generate_pptx_report(self, metadata: ReportMetadata,
                            sections: List[ReportSection]) -> bytes:
        """PowerPoint 리포트 생성"""
        # 프레젠테이션 생성
        prs = Presentation()
        
        # 슬라이드 크기 설정 (16:9)
        prs.slide_width = Inches(13.333)
        prs.slide_height = Inches(7.5)
        
        # 1. 타이틀 슬라이드
        title_slide_layout = prs.slide_layouts[0]
        slide = prs.slides.add_slide(title_slide_layout)
        
        title = slide.shapes.title
        subtitle = slide.placeholders[1]
        
        title.text = metadata.title
        subtitle.text = f"{metadata.subtitle}\n{metadata.generated_date.strftime('%Y년 %m월 %d일')}"
        
        # 타이틀 스타일링
        title.text_frame.paragraphs[0].font.size = Pt(40)
        title.text_frame.paragraphs[0].font.bold = True
        title.text_frame.paragraphs[0].font.color.rgb = RGBColor(0, 47, 108)  # 네이비
        
        # 2. 목차 슬라이드
        toc_slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(toc_slide_layout)
        
        title = slide.shapes.title
        title.text = self._get_text("Agenda", "목차", metadata.language)
        
        # 목차 내용
        content = slide.placeholders[1]
        tf = content.text_frame
        
        for i, section in enumerate(sections, 1):
            p = tf.add_paragraph()
            p.text = f"{i}. {section.title}"
            p.level = 0
            p.font.size = Pt(18)
        
        # 3. 각 섹션별 슬라이드
        for section in sections:
            # 섹션 타이틀 슬라이드
            section_title_slide = prs.slides.add_slide(prs.slide_layouts[2])
            title = section_title_slide.shapes.title
            title.text = section.title
            
            # 내용 슬라이드
            if section.content:
                content_slide = prs.slides.add_slide(prs.slide_layouts[1])
                title = content_slide.shapes.title
                title.text = section.title
                
                content = content_slide.placeholders[1]
                tf = content.text_frame
                tf.text = section.content
                tf.word_wrap = True
            
            # 차트 슬라이드
            for chart_data in section.charts:
                chart_slide = prs.slides.add_slide(prs.slide_layouts[5])
                title = chart_slide.shapes.title
                title.text = chart_data.get('title', section.title)
                
                # 차트 추가
                self._add_pptx_chart(chart_slide, chart_data)
            
            # 테이블 슬라이드
            for table_data in section.tables:
                table_slide = prs.slides.add_slide(prs.slide_layouts[5])
                title = table_slide.shapes.title
                title.text = table_data.get('title', section.title)
                
                # 테이블 추가
                self._add_pptx_table(table_slide, table_data)
            
            # 추천사항 슬라이드
            if section.recommendations:
                rec_slide = prs.slides.add_slide(prs.slide_layouts[1])
                title = rec_slide.shapes.title
                title.text = self._get_text("Recommendations", "권고사항", metadata.language)
                
                content = rec_slide.placeholders[1]
                tf = content.text_frame
                
                for rec in section.recommendations:
                    p = tf.add_paragraph()
                    p.text = f"• {rec.get('text', '')}"
                    p.level = 0
                    
                    # 우선순위별 색상
                    if rec.get('priority') == 'high':
                        p.font.color.rgb = RGBColor(228, 0, 43)  # 빨강
                    elif rec.get('priority') == 'medium':
                        p.font.color.rgb = RGBColor(255, 176, 0)  # 주황
        
        # 4. 마지막 슬라이드 (Thank You)
        end_slide = prs.slides.add_slide(prs.slide_layouts[0])
        title = end_slide.shapes.title
        subtitle = end_slide.placeholders[1]
        
        title.text = self._get_text("Thank You", "감사합니다", metadata.language)
        subtitle.text = self._get_text(
            "For questions, contact HR Analytics Team",
            "문의사항은 HR Analytics팀으로 연락주세요",
            metadata.language
        )
        
        # 메모리 버퍼에 저장
        buffer = BytesIO()
        prs.save(buffer)
        buffer.seek(0)
        return buffer.read()
    
    def _add_pptx_chart(self, slide, chart_data: Dict[str, Any]):
        """PPTX에 차트 추가"""
        chart_type = chart_data.get('type', 'bar')
        
        # 차트 위치와 크기
        x, y = Inches(1), Inches(2)
        cx, cy = Inches(11), Inches(5)
        
        if chart_type == 'bar':
            # 막대 차트
            chart_data_obj = CategoryChartData()
            chart_data_obj.categories = chart_data.get('categories', [])
            
            for series in chart_data.get('series', []):
                chart_data_obj.add_series(series['name'], series['data'])
            
            chart = slide.shapes.add_chart(
                XL_CHART_TYPE.COLUMN_CLUSTERED, x, y, cx, cy, chart_data_obj
            ).chart
            
            # 스타일링
            chart.has_legend = True
            chart.legend.position = XL_LEGEND_POSITION.BOTTOM
            
        elif chart_type == 'line':
            # 라인 차트
            chart_data_obj = CategoryChartData()
            chart_data_obj.categories = chart_data.get('categories', [])
            
            for series in chart_data.get('series', []):
                chart_data_obj.add_series(series['name'], series['data'])
            
            chart = slide.shapes.add_chart(
                XL_CHART_TYPE.LINE, x, y, cx, cy, chart_data_obj
            ).chart
            
        elif chart_type == 'pie':
            # 파이 차트
            chart_data_obj = ChartData()
            chart_data_obj.categories = chart_data.get('categories', [])
            chart_data_obj.add_series('', chart_data.get('values', []))
            
            chart = slide.shapes.add_chart(
                XL_CHART_TYPE.PIE, x, y, cx, cy, chart_data_obj
            ).chart
    
    def _add_pptx_table(self, slide, table_data: Dict[str, Any]):
        """PPTX에 테이블 추가"""
        rows = len(table_data.get('data', [])) + 1  # 헤더 포함
        cols = len(table_data.get('headers', []))
        
        if rows == 1 or cols == 0:
            return
        
        # 테이블 위치와 크기
        x, y = Inches(1), Inches(2)
        cx, cy = Inches(11), Inches(5)
        
        table = slide.shapes.add_table(rows, cols, x, y, cx, cy).table
        
        # 헤더 설정
        for i, header in enumerate(table_data.get('headers', [])):
            cell = table.cell(0, i)
            cell.text = str(header)
            cell.fill.solid()
            cell.fill.fore_color.rgb = RGBColor(0, 47, 108)
            
            # 헤더 텍스트 스타일
            paragraph = cell.text_frame.paragraphs[0]
            paragraph.font.bold = True
            paragraph.font.color.rgb = RGBColor(255, 255, 255)
            paragraph.alignment = PP_ALIGN.CENTER
        
        # 데이터 설정
        for row_idx, row_data in enumerate(table_data.get('data', []), 1):
            for col_idx, value in enumerate(row_data):
                cell = table.cell(row_idx, col_idx)
                cell.text = str(value)
                
                # 짝수 행 배경색
                if row_idx % 2 == 0:
                    cell.fill.solid()
                    cell.fill.fore_color.rgb = RGBColor(245, 245, 245)
    
    def _generate_html_report(self, metadata: ReportMetadata,
                            sections: List[ReportSection]) -> bytes:
        """HTML 리포트 생성"""
        # HTML 템플릿 컨텍스트
        context = {
            'metadata': metadata,
            'sections': sections,
            'brand_colors': self.brand_colors,
            'generated_date': metadata.generated_date.strftime('%Y-%m-%d %H:%M:%S')
        }
        
        # 템플릿 렌더링
        html_content = render_to_string('reports/leadership_report.html', context)
        
        return html_content.encode('utf-8')
    
    def _generate_json_report(self, metadata: ReportMetadata,
                            sections: List[ReportSection]) -> bytes:
        """JSON 리포트 생성"""
        report_data = {
            'metadata': {
                'title': metadata.title,
                'subtitle': metadata.subtitle,
                'generated_date': metadata.generated_date.isoformat(),
                'period_start': metadata.period_start.isoformat(),
                'period_end': metadata.period_end.isoformat(),
                'department': metadata.department,
                'author': metadata.author,
                'language': metadata.language.value
            },
            'sections': []
        }
        
        for section in sections:
            section_data = {
                'title': section.title,
                'content': section.content,
                'data': section.data,
                'charts': section.charts,
                'tables': section.tables,
                'insights': section.insights,
                'recommendations': section.recommendations
            }
            report_data['sections'].append(section_data)
        
        return json.dumps(report_data, ensure_ascii=False, indent=2).encode('utf-8')
    
    def _create_pdf_chart(self, chart_data: Dict[str, Any]) -> Flowable:
        """PDF용 차트 생성"""
        chart_type = chart_data.get('type', 'bar')
        
        drawing = Drawing(400, 200)
        
        if chart_type == 'bar':
            chart = VerticalBarChart()
            chart.x = 50
            chart.y = 50
            chart.height = 125
            chart.width = 300
            
            chart.data = chart_data.get('data', [])
            chart.categoryAxis.categoryNames = chart_data.get('categories', [])
            
            # 스타일링
            chart.valueAxis.valueMin = 0
            chart.valueAxis.valueMax = max(max(series) for series in chart.data) * 1.1
            chart.bars[0].fillColor = colors.HexColor(self.brand_colors['primary'])
            
            drawing.add(chart)
            
        elif chart_type == 'line':
            chart = HorizontalLineChart()
            chart.x = 50
            chart.y = 50
            chart.height = 125
            chart.width = 300
            
            chart.data = chart_data.get('data', [])
            chart.categoryAxis.categoryNames = chart_data.get('categories', [])
            
            drawing.add(chart)
            
        elif chart_type == 'pie':
            chart = Pie()
            chart.x = 150
            chart.y = 50
            chart.width = 100
            chart.height = 100
            
            chart.data = chart_data.get('values', [])
            chart.labels = chart_data.get('labels', [])
            
            # 색상 설정
            for i, color in enumerate([
                self.brand_colors['primary'],
                self.brand_colors['secondary'],
                self.brand_colors['accent'],
                self.brand_colors['success']
            ]):
                if i < len(chart.data):
                    chart.slices[i].fillColor = colors.HexColor(color)
            
            drawing.add(chart)
        
        # 제목 추가
        if 'title' in chart_data:
            from reportlab.graphics.shapes import String
            title = String(200, 180, chart_data['title'], textAnchor='middle')
            drawing.add(title)
        
        return drawing
    
    def _create_pdf_table(self, table_data: Dict[str, Any], font_name: str) -> Table:
        """PDF용 테이블 생성"""
        headers = table_data.get('headers', [])
        data = [headers] + table_data.get('data', [])
        
        table = Table(data)
        
        # 테이블 스타일
        style = TableStyle([
            # 헤더 스타일
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor(self.brand_colors['primary'])),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('FONTNAME', (0, 0), (-1, 0), font_name),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('VALIGN', (0, 0), (-1, 0), 'MIDDLE'),
            
            # 데이터 스타일
            ('FONTNAME', (0, 1), (-1, -1), font_name),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('ALIGN', (0, 1), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 1), (-1, -1), 'MIDDLE'),
            
            # 격자
            ('GRID', (0, 0), (-1, -1), 1, colors.grey),
            
            # 줄무늬
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f5f5f5')])
        ])
        
        table.setStyle(style)
        return table
    
    # 데이터 수집 헬퍼 메서드들
    def _get_year_over_year_comparison(self, department_id: Optional[str]) -> Dict[str, Any]:
        """전년 대비 비교 데이터"""
        current_year = timezone.now().year
        
        # 현재 연도 데이터
        current_data = self.kpi_analytics.calculate_leader_pipeline_kpis(
            department_id, TimeRange.CURRENT_YEAR
        )
        
        # 작년 데이터 (실제 구현시 작년 데이터 조회 필요)
        # 여기서는 예시 데이터 사용
        return {
            'leader_candidates_growth': 15.5,
            'certification_rate_change': 8.3,
            'training_hours_increase': 22.1,
            'readiness_improvement': 5.7
        }
    
    def _get_trend_data(self, report_type: ReportType, 
                       department_id: Optional[str]) -> Dict[str, Any]:
        """트렌드 데이터 수집"""
        if report_type in [ReportType.MONTHLY_REPORT, ReportType.QUARTERLY_REVIEW]:
            # 월별 트렌드
            return self._get_monthly_trends(department_id, 12)
        else:
            # 분기별 트렌드
            return self._get_quarterly_trends(department_id, 8)
    
    def _get_monthly_trends(self, department_id: Optional[str], months: int) -> Dict[str, Any]:
        """월별 트렌드 데이터"""
        trends = {
            'pipeline': [],
            'certification': [],
            'training': []
        }
        
        end_date = timezone.now()
        
        for i in range(months):
            month_date = end_date - timedelta(days=30 * i)
            month_str = month_date.strftime('%Y-%m')
            
            # 각 월별 데이터 수집 (실제 구현시 실제 데이터 조회)
            trends['pipeline'].append({
                'month': month_str,
                'candidates': 100 + i * 5,  # 예시 데이터
                'ready_now': 20 + i
            })
            
            trends['certification'].append({
                'month': month_str,
                'applications': 50 + i * 2,
                'completions': 40 + i * 2
            })
            
            trends['training'].append({
                'month': month_str,
                'participants': 200 + i * 10,
                'hours': 1000 + i * 50
            })
        
        return trends
    
    def _get_quarterly_trends(self, department_id: Optional[str], quarters: int) -> Dict[str, Any]:
        """분기별 트렌드 데이터"""
        trends = {
            'pipeline': [],
            'certification': [],
            'training': []
        }
        
        current_date = timezone.now()
        
        for i in range(quarters):
            quarter_date = current_date - timedelta(days=90 * i)
            quarter_str = f"{quarter_date.year}Q{(quarter_date.month - 1) // 3 + 1}"
            
            # 각 분기별 데이터 수집
            trends['pipeline'].append({
                'quarter': quarter_str,
                'candidates': 300 + i * 15,
                'avg_readiness': 70 + i * 2
            })
        
        return trends
    
    def _get_department_analysis(self) -> List[Dict[str, Any]]:
        """부서별 분석 데이터"""
        departments = Department.objects.filter(is_active=True, parent_id__isnull=True)
        analysis = []
        
        for dept in departments:
            dept_kpis = {
                'department': dept.name,
                'employee_count': Employee.objects.filter(department=dept, is_active=True).count()
            }
            
            # 각 부서의 KPI 수집
            pipeline = self.kpi_analytics.calculate_leader_pipeline_kpis(str(dept.id))
            cert = self.kpi_analytics.calculate_certification_progress_kpis(str(dept.id))
            training = self.kpi_analytics.calculate_training_effectiveness_kpis(str(dept.id))
            
            dept_kpis.update({
                'leader_candidates': pipeline['total_candidates'].value,
                'certification_rate': cert['certification_rate'].value,
                'training_participation': training['participation_rate'].value,
                'avg_readiness': pipeline['avg_readiness_score'].value
            })
            
            analysis.append(dept_kpis)
        
        # 점수순 정렬
        analysis.sort(key=lambda x: x.get('avg_readiness', 0), reverse=True)
        
        return analysis
    
    def _get_pipeline_details(self, department_id: Optional[str]) -> Dict[str, Any]:
        """파이프라인 상세 데이터"""
        # 실제 구현시 상세 데이터 조회
        return {
            'by_level': {
                'Lv.1': 50,
                'Lv.2': 80,
                'Lv.3': 60,
                'Lv.4': 30,
                'Lv.5': 10
            },
            'by_readiness': {
                '0-25%': 20,
                '26-50%': 40,
                '51-75%': 80,
                '76-100%': 60
            },
            'succession_coverage': {
                'covered': 15,
                'partial': 8,
                'uncovered': 5
            }
        }
    
    def _get_certification_details(self, department_id: Optional[str]) -> Dict[str, Any]:
        """인증 상세 데이터"""
        return {
            'by_status': {
                'certified': 120,
                'in_progress': 45,
                'pending': 30,
                'rejected': 5
            },
            'by_level': {
                'Lv.2': 60,
                'Lv.3': 40,
                'Lv.4': 20,
                'Lv.5': 5
            },
            'average_days': {
                'Lv.2': 25,
                'Lv.3': 35,
                'Lv.4': 45,
                'Lv.5': 60
            }
        }
    
    def _get_training_details(self, department_id: Optional[str]) -> Dict[str, Any]:
        """교육 상세 데이터"""
        return {
            'popular_courses': [
                {'name': '리더십 기초', 'participants': 150, 'satisfaction': 4.5},
                {'name': '성과 관리', 'participants': 120, 'satisfaction': 4.3},
                {'name': '전략적 사고', 'participants': 100, 'satisfaction': 4.7}
            ],
            'by_category': {
                '리더십': 45,
                '전문 스킬': 30,
                '소프트 스킬': 25
            },
            'completion_trend': [
                {'month': '2024-01', 'rate': 85},
                {'month': '2024-02', 'rate': 88},
                {'month': '2024-03', 'rate': 92}
            ]
        }
    
    def _get_benchmark_data(self) -> Dict[str, Any]:
        """벤치마크 데이터"""
        return {
            'industry_average': {
                'leader_ratio': 15.0,
                'certification_rate': 75.0,
                'training_hours': 40.0,
                'succession_coverage': 80.0
            },
            'best_in_class': {
                'leader_ratio': 20.0,
                'certification_rate': 90.0,
                'training_hours': 60.0,
                'succession_coverage': 95.0
            }
        }
    
    # 차트 생성 헬퍼 메서드들
    def _create_kpi_summary_chart(self, kpis: Dict[str, Any]) -> Dict[str, Any]:
        """KPI 요약 차트"""
        return {
            'type': 'gauge',
            'title': 'Overall Leadership Health Score',
            'data': {
                'value': 78.5,  # 종합 점수 계산
                'min': 0,
                'max': 100,
                'target': 85,
                'zones': [
                    {'min': 0, 'max': 60, 'color': self.brand_colors['danger']},
                    {'min': 60, 'max': 80, 'color': self.brand_colors['warning']},
                    {'min': 80, 'max': 100, 'color': self.brand_colors['success']}
                ]
            }
        }
    
    def _create_pipeline_chart(self, pipeline_data: Dict[str, Any]) -> Dict[str, Any]:
        """파이프라인 차트"""
        return {
            'type': 'bar',
            'title': 'Leadership Pipeline Distribution',
            'categories': ['Total Candidates', 'Ready Now', 'Ready in 1 Year', 'Development Needed'],
            'data': [[
                pipeline_data['total_candidates'].value,
                pipeline_data['ready_now'].value,
                pipeline_data['ready_in_year'].value,
                pipeline_data['total_candidates'].value - pipeline_data['ready_now'].value - pipeline_data['ready_in_year'].value
            ]]
        }
    
    def _create_certification_chart(self, cert_data: Dict[str, Any]) -> Dict[str, Any]:
        """인증 차트"""
        return {
            'type': 'pie',
            'title': 'Certification Status Distribution',
            'labels': ['Certified', 'In Progress', 'Not Started'],
            'values': [
                cert_data['certification_rate'].value,
                20,  # 예시 데이터
                100 - cert_data['certification_rate'].value - 20
            ]
        }
    
    def _create_training_chart(self, training_data: Dict[str, Any]) -> Dict[str, Any]:
        """교육 차트"""
        return {
            'type': 'line',
            'title': 'Training Participation Trend',
            'categories': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
            'series': [
                {
                    'name': 'Participation Rate',
                    'data': [85, 88, 92, 90, 93, training_data['participation_rate'].value]
                },
                {
                    'name': 'Completion Rate',
                    'data': [80, 83, 87, 85, 88, training_data['completion_rate'].value]
                }
            ]
        }
    
    def _create_readiness_chart(self, readiness_data: Dict[str, Any]) -> Dict[str, Any]:
        """준비도 차트"""
        return {
            'type': 'radar',
            'title': 'Talent Readiness Assessment',
            'categories': ['High Potential', 'Key Position Coverage', 'Succession Readiness', 'Competency Level', 'Retention'],
            'data': [[
                readiness_data['high_potential_ratio'].value,
                readiness_data['key_position_coverage'].value,
                readiness_data['succession_readiness'].value,
                75,  # 예시 데이터
                88   # 예시 데이터
            ]]
        }
    
    def _create_trend_chart(self, trend_data: Dict[str, Any], metric: str) -> Dict[str, Any]:
        """트렌드 차트"""
        if metric == 'pipeline':
            return {
                'type': 'line',
                'title': 'Leader Pipeline Trend',
                'categories': [item['month'] for item in trend_data.get('pipeline', [])[-6:]],
                'series': [
                    {
                        'name': 'Total Candidates',
                        'data': [item['candidates'] for item in trend_data.get('pipeline', [])[-6:]]
                    },
                    {
                        'name': 'Ready Now',
                        'data': [item['ready_now'] for item in trend_data.get('pipeline', [])[-6:]]
                    }
                ]
            }
        else:
            return {
                'type': 'line',
                'title': 'Certification Progress Trend',
                'categories': [item['month'] for item in trend_data.get('certification', [])[-6:]],
                'series': [
                    {
                        'name': 'Applications',
                        'data': [item['applications'] for item in trend_data.get('certification', [])[-6:]]
                    },
                    {
                        'name': 'Completions',
                        'data': [item['completions'] for item in trend_data.get('certification', [])[-6:]]
                    }
                ]
            }
    
    def _create_department_comparison_chart(self, dept_data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """부서 비교 차트"""
        return {
            'type': 'horizontal_bar',
            'title': 'Department Leadership KPI Comparison',
            'categories': [d['department'] for d in dept_data[:10]],
            'series': [
                {
                    'name': 'Leader Candidates',
                    'data': [d['leader_candidates'] for d in dept_data[:10]]
                },
                {
                    'name': 'Avg Readiness %',
                    'data': [d['avg_readiness'] for d in dept_data[:10]]
                }
            ]
        }
    
    def _create_department_ranking_table(self, dept_data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """부서 순위 테이블"""
        return {
            'title': 'Department Leadership KPI Rankings',
            'headers': ['Rank', 'Department', 'Employees', 'Leader Candidates', 'Cert Rate %', 'Training %', 'Readiness Score'],
            'data': [
                [
                    i + 1,
                    d['department'],
                    d['employee_count'],
                    d['leader_candidates'],
                    f"{d['certification_rate']:.1f}",
                    f"{d['training_participation']:.1f}",
                    f"{d['avg_readiness']:.1f}"
                ]
                for i, d in enumerate(dept_data[:10])
            ]
        }
    
    def _create_recommendation_impact_chart(self, recommendations: List[Dict[str, str]]) -> Dict[str, Any]:
        """추천사항 영향도 차트"""
        # 우선순위별 집계
        priority_counts = {'high': 0, 'medium': 0, 'low': 0}
        for rec in recommendations:
            priority = rec.get('priority', 'medium')
            priority_counts[priority] = priority_counts.get(priority, 0) + 1
        
        return {
            'type': 'pie',
            'title': 'Recommendations by Priority',
            'labels': ['High Priority', 'Medium Priority', 'Low Priority'],
            'values': [priority_counts['high'], priority_counts['medium'], priority_counts['low']]
        }
    
    def _create_risk_matrix_chart(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """리스크 매트릭스 차트"""
        return {
            'type': 'scatter',
            'title': 'Leadership Risk Matrix',
            'data': [
                {'x': 3, 'y': 4, 'size': 20, 'label': 'Succession Gap', 'color': self.brand_colors['danger']},
                {'x': 2, 'y': 3, 'size': 15, 'label': 'Training Lag', 'color': self.brand_colors['warning']},
                {'x': 4, 'y': 2, 'size': 10, 'label': 'Certification Delay', 'color': self.brand_colors['warning']},
                {'x': 1, 'y': 1, 'size': 5, 'label': 'Retention Risk', 'color': self.brand_colors['success']}
            ],
            'axes': {
                'x': {'label': 'Likelihood', 'min': 0, 'max': 5},
                'y': {'label': 'Impact', 'min': 0, 'max': 5}
            }
        }
    
    def _create_kpi_comparison_table(self, current: Dict[str, Any], 
                                   comparison: Dict[str, Any]) -> Dict[str, Any]:
        """KPI 비교 테이블"""
        return {
            'title': 'KPI Performance vs Previous Period',
            'headers': ['KPI', 'Current', 'Previous', 'Change', 'Status'],
            'data': [
                [
                    'Leader Candidates',
                    current['leader_pipeline']['total_candidates'].value,
                    current['leader_pipeline']['total_candidates'].value - 10,
                    '+10',
                    '↑'
                ],
                [
                    'Certification Rate',
                    f"{current['certification']['certification_rate'].value}%",
                    f"{current['certification']['certification_rate'].value - 5}%",
                    '+5%',
                    '↑'
                ],
                [
                    'Training Participation',
                    f"{current['training']['participation_rate'].value}%",
                    f"{current['training']['participation_rate'].value - 3}%",
                    '+3%',
                    '↑'
                ],
                [
                    'High Potential Ratio',
                    f"{current['readiness']['high_potential_ratio'].value}%",
                    f"{current['readiness']['high_potential_ratio'].value + 2}%",
                    '-2%',
                    '↓'
                ]
            ]
        }
    
    def _create_detailed_metrics_table(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """상세 메트릭 테이블"""
        return {
            'title': 'Detailed Metrics',
            'headers': ['Category', 'Metric', 'Value', 'Target', 'Achievement'],
            'data': [
                ['Leader Pipeline', 'Total Candidates', '125', '150', '83%'],
                ['Leader Pipeline', 'Ready Now', '22', '30', '73%'],
                ['Leader Pipeline', 'Average Readiness', '72.5%', '75%', '97%'],
                ['Certification', 'Applications', '45', '50', '90%'],
                ['Certification', 'Completion Rate', '82%', '85%', '96%'],
                ['Training', 'Participation Rate', '88%', '90%', '98%'],
                ['Training', 'Leadership Focus', '42%', '40%', '105%']
            ]
        }
    
    def _create_methodology_table(self, language: ReportLanguage) -> Dict[str, Any]:
        """방법론 테이블"""
        if language == ReportLanguage.KOREAN:
            return {
                'title': '데이터 수집 및 분석 방법론',
                'headers': ['항목', '설명'],
                'data': [
                    ['데이터 기간', '최근 12개월 누적 데이터'],
                    ['수집 주기', '일별 수집, 월별 집계'],
                    ['분석 방법', 'AI 기반 트렌드 분석 및 예측 모델링'],
                    ['신뢰도', '95% 신뢰 구간 적용']
                ]
            }
        else:
            return {
                'title': 'Data Collection and Analysis Methodology',
                'headers': ['Item', 'Description'],
                'data': [
                    ['Data Period', 'Last 12 months cumulative'],
                    ['Collection Frequency', 'Daily collection, monthly aggregation'],
                    ['Analysis Method', 'AI-based trend analysis and predictive modeling'],
                    ['Confidence Level', '95% confidence interval']
                ]
            }
    
    # 유틸리티 메서드들
    def _get_text(self, en_text: str, ko_text: str, language: ReportLanguage) -> str:
        """언어별 텍스트 반환"""
        if language == ReportLanguage.KOREAN:
            return ko_text
        elif language == ReportLanguage.ENGLISH:
            return en_text
        else:  # BILINGUAL
            return f"{ko_text} / {en_text}"
    
    def _serialize_for_ai(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """AI 처리를 위한 데이터 직렬화"""
        serialized = {}
        
        for key, value in data.items():
            if hasattr(value, '__dict__'):
                # 객체인 경우 딕셔너리로 변환
                serialized[key] = {
                    'name': getattr(value, 'name', ''),
                    'value': getattr(value, 'value', 0),
                    'unit': getattr(value, 'unit', ''),
                    'trend': getattr(value, 'trend', ''),
                    'target': getattr(value, 'target', None)
                }
            elif isinstance(value, dict):
                serialized[key] = self._serialize_for_ai(value)
            else:
                serialized[key] = value
        
        return serialized
    
    def _extract_key_insights(self, kpi_data: Dict[str, Any]) -> List[str]:
        """주요 인사이트 추출"""
        insights = []
        
        # 리더 파이프라인 인사이트
        if 'leader_pipeline' in kpi_data:
            pipeline = kpi_data['leader_pipeline']
            if pipeline['ready_now'].value < pipeline['total_candidates'].value * 0.2:
                insights.append("즉시 승진 가능 인원이 전체의 20% 미만으로 육성 가속화 필요")
        
        # 인증 인사이트
        if 'certification' in kpi_data:
            cert = kpi_data['certification']
            if cert['certification_rate'].value > 85:
                insights.append("인증 완료율이 목표를 초과 달성하여 우수한 성과")
        
        # 교육 인사이트
        if 'training' in kpi_data:
            training = kpi_data['training']
            if training['leadership_focus'].value < 40:
                insights.append("리더십 교육 비중이 40% 미만으로 리더십 과정 확대 필요")
        
        return insights


class ReportGeneratorView(View):
    """리포트 생성 뷰"""
    
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        # 권한 체크
        if not self.request.user.groups.filter(name__in=['HR', 'Executive']).exists():
            return JsonResponse({'error': 'Unauthorized'}, status=403)
        return super().dispatch(*args, **kwargs)
    
    def post(self, request):
        """리포트 생성 요청 처리"""
        try:
            data = json.loads(request.body)
            
            # 파라미터 추출
            report_type = ReportType(data.get('report_type', 'monthly_report'))
            format = ReportFormat(data.get('format', 'pdf'))
            language = ReportLanguage(data.get('language', 'ko'))
            department_id = data.get('department_id')
            custom_params = data.get('custom_params', {})
            
            # 리포트 생성
            generator = LeadershipStrategyReportGenerator()
            report_data = generator.generate_report(
                report_type, format, language, department_id, custom_params
            )
            
            # 응답 헤더 설정
            content_types = {
                ReportFormat.PDF: 'application/pdf',
                ReportFormat.PPTX: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                ReportFormat.HTML: 'text/html',
                ReportFormat.JSON: 'application/json'
            }
            
            file_extensions = {
                ReportFormat.PDF: 'pdf',
                ReportFormat.PPTX: 'pptx',
                ReportFormat.HTML: 'html',
                ReportFormat.JSON: 'json'
            }
            
            # 파일명 생성
            filename = f"leadership_report_{report_type.value}_{timezone.now().strftime('%Y%m%d_%H%M%S')}.{file_extensions[format]}"
            
            response = HttpResponse(
                report_data,
                content_type=content_types[format]
            )
            response['Content-Disposition'] = f'attachment; filename="{filename}"'
            
            return response
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)


class ScheduledReportView(View):
    """정기 리포트 스케줄링"""
    
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def get(self, request):
        """스케줄된 리포트 목록 조회"""
        # 실제 구현시 스케줄 모델에서 조회
        schedules = [
            {
                'id': 1,
                'name': '월간 경영진 리포트',
                'report_type': 'monthly_report',
                'format': 'pdf',
                'language': 'ko',
                'frequency': 'monthly',
                'recipients': ['ceo@company.com', 'hr-head@company.com'],
                'next_run': '2024-04-01',
                'status': 'active'
            },
            {
                'id': 2,
                'name': '분기별 인재 파이프라인 분석',
                'report_type': 'talent_pipeline',
                'format': 'pptx',
                'language': 'bi',
                'frequency': 'quarterly',
                'recipients': ['board@company.com'],
                'next_run': '2024-04-01',
                'status': 'active'
            }
        ]
        
        return JsonResponse({'schedules': schedules})
    
    def post(self, request):
        """새 리포트 스케줄 생성"""
        try:
            data = json.loads(request.body)
            
            # 스케줄 생성 로직
            # 실제 구현시 스케줄 모델에 저장
            
            return JsonResponse({
                'message': 'Schedule created successfully',
                'schedule_id': 3
            })
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)


# URL 패턴
urlpatterns = [
    # 리포트 생성
    path('api/generate-report/', ReportGeneratorView.as_view(), name='generate_report'),
    
    # 스케줄 관리
    path('api/report-schedules/', ScheduledReportView.as_view(), name='report_schedules'),
]


# HTML 템플릿 예시
REPORT_HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ metadata.title }}</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Noto Sans KR', sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f5f5;
        }
        
        .report-container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
        
        .report-header {
            background-color: {{ brand_colors.primary }};
            color: white;
            padding: 60px 40px;
            text-align: center;
        }
        
        .report-header h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
        }
        
        .report-header .subtitle {
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .metadata {
            background-color: #f8f9fa;
            padding: 30px 40px;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }
        
        .metadata-item {
            text-align: center;
        }
        
        .metadata-item .label {
            font-size: 0.9em;
            color: #666;
            margin-bottom: 5px;
        }
        
        .metadata-item .value {
            font-size: 1.1em;
            font-weight: 500;
            color: {{ brand_colors.primary }};
        }
        
        .toc {
            padding: 40px;
            background-color: #fafafa;
        }
        
        .toc h2 {
            color: {{ brand_colors.primary }};
            margin-bottom: 20px;
        }
        
        .toc-list {
            list-style: none;
        }
        
        .toc-list li {
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        
        .toc-list li:last-child {
            border-bottom: none;
        }
        
        .section {
            padding: 60px 40px;
            border-bottom: 1px solid #eee;
        }
        
        .section:last-child {
            border-bottom: none;
        }
        
        .section h2 {
            color: {{ brand_colors.primary }};
            font-size: 2em;
            margin-bottom: 30px;
        }
        
        .section-content {
            margin-bottom: 30px;
            line-height: 1.8;
        }
        
        .chart-container {
            margin: 30px 0;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
        }
        
        .table-container {
            overflow-x: auto;
            margin: 30px 0;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
        }
        
        th {
            background-color: {{ brand_colors.primary }};
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 500;
        }
        
        td {
            padding: 12px 15px;
            border-bottom: 1px solid #eee;
        }
        
        tr:nth-child(even) {
            background-color: #f8f9fa;
        }
        
        .insights {
            background-color: #e8f4fd;
            border-left: 4px solid {{ brand_colors.secondary }};
            padding: 20px;
            margin: 20px 0;
        }
        
        .insights h3 {
            color: {{ brand_colors.secondary }};
            margin-bottom: 15px;
        }
        
        .insights ul {
            list-style: none;
        }
        
        .insights li {
            padding: 8px 0;
            position: relative;
            padding-left: 25px;
        }
        
        .insights li:before {
            content: "•";
            color: {{ brand_colors.secondary }};
            font-size: 1.5em;
            position: absolute;
            left: 0;
        }
        
        .recommendations {
            background-color: #fff3cd;
            border-left: 4px solid {{ brand_colors.warning }};
            padding: 20px;
            margin: 20px 0;
        }
        
        .recommendations h3 {
            color: {{ brand_colors.warning }};
            margin-bottom: 15px;
        }
        
        .recommendation-item {
            padding: 10px 0;
            border-bottom: 1px solid #f0e0b0;
        }
        
        .recommendation-item:last-child {
            border-bottom: none;
        }
        
        .priority-high {
            color: {{ brand_colors.danger }};
            font-weight: 500;
        }
        
        .priority-medium {
            color: {{ brand_colors.warning }};
        }
        
        .priority-low {
            color: {{ brand_colors.neutral }};
        }
        
        @media print {
            .report-container {
                box-shadow: none;
            }
            
            .section {
                page-break-inside: avoid;
            }
            
            .report-header {
                background-color: {{ brand_colors.primary }} !important;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }
        }
    </style>
</head>
<body>
    <div class="report-container">
        <!-- 헤더 -->
        <div class="report-header">
            <h1>{{ metadata.title }}</h1>
            <div class="subtitle">{{ metadata.subtitle }}</div>
        </div>
        
        <!-- 메타데이터 -->
        <div class="metadata">
            <div class="metadata-item">
                <div class="label">생성일</div>
                <div class="value">{{ generated_date }}</div>
            </div>
            <div class="metadata-item">
                <div class="label">분석 기간</div>
                <div class="value">{{ metadata.period_start|date:"Y-m-d" }} ~ {{ metadata.period_end|date:"Y-m-d" }}</div>
            </div>
            <div class="metadata-item">
                <div class="label">대상</div>
                <div class="value">{{ metadata.department|default:"전사" }}</div>
            </div>
            <div class="metadata-item">
                <div class="label">보안 등급</div>
                <div class="value">{{ metadata.confidentiality }}</div>
            </div>
        </div>
        
        <!-- 목차 -->
        <div class="toc">
            <h2>목차</h2>
            <ol class="toc-list">
                {% for section in sections %}
                <li>{{ forloop.counter }}. {{ section.title }}</li>
                {% endfor %}
            </ol>
        </div>
        
        <!-- 섹션들 -->
        {% for section in sections %}
        <div class="section">
            <h2>{{ forloop.counter }}. {{ section.title }}</h2>
            
            {% if section.content %}
            <div class="section-content">
                {{ section.content|linebreaks }}
            </div>
            {% endif %}
            
            {% if section.charts %}
            {% for chart in section.charts %}
            <div class="chart-container">
                <h3>{{ chart.title }}</h3>
                <!-- 차트 렌더링 영역 -->
                <div id="chart-{{ forloop.counter }}" style="height: 400px;"></div>
            </div>
            {% endfor %}
            {% endif %}
            
            {% if section.tables %}
            {% for table in section.tables %}
            <div class="table-container">
                <h3>{{ table.title }}</h3>
                <table>
                    <thead>
                        <tr>
                            {% for header in table.headers %}
                            <th>{{ header }}</th>
                            {% endfor %}
                        </tr>
                    </thead>
                    <tbody>
                        {% for row in table.data %}
                        <tr>
                            {% for cell in row %}
                            <td>{{ cell }}</td>
                            {% endfor %}
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            {% endfor %}
            {% endif %}
            
            {% if section.insights %}
            <div class="insights">
                <h3>주요 인사이트</h3>
                <ul>
                    {% for insight in section.insights %}
                    <li>{{ insight }}</li>
                    {% endfor %}
                </ul>
            </div>
            {% endif %}
            
            {% if section.recommendations %}
            <div class="recommendations">
                <h3>권고사항</h3>
                {% for rec in section.recommendations %}
                <div class="recommendation-item priority-{{ rec.priority }}">
                    {{ rec.text }}
                </div>
                {% endfor %}
            </div>
            {% endif %}
        </div>
        {% endfor %}
    </div>
    
    <!-- 차트 렌더링 스크립트 -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // 차트 데이터가 있으면 렌더링
        {% for section in sections %}
            {% for chart in section.charts %}
                // chart 렌더링 코드
            {% endfor %}
        {% endfor %}
    </script>
</body>
</html>
"""